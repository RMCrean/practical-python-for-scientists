{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Course Overview","text":""},{"location":"#key-points","title":"Key Points","text":"<ul> <li>Course is held at: B8:001, BMC mazemap link</li> <li>Course week is: Monday the 8th January to Friday the 12th of January</li> <li>Course start: 9 am</li> <li>Room booked until: 5 pm (Teaching part will normally finish before lunch, after lunch there are group exercises/work). (You likely wont need to stay that long, but the room will be available if you want it). </li> </ul>"},{"location":"#teacher-contact-details","title":"Teacher Contact details:","text":"<ul> <li>Name: Rory Crean </li> <li>Easiest way to reach me is by email: rory.crean@kemi.uu.se</li> </ul>"},{"location":"#course-prerequisites","title":"Course Prerequisites:","text":"<p>Students should have a basic knowledge of Python programming. This could be achieved by taking any of the many free online introductory courses. </p>"},{"location":"#course-material","title":"Course Material:","text":"<ul> <li>Course Material can be found at: https://github.com/RMCrean/practical-python-for-scientists (We will all download this today).</li> <li>Credit Points: 2. (50% attendance, 50% final project).  </li> </ul>"},{"location":"#credit-points","title":"Credit Points:","text":"<ul> <li>Course is worth 2 credit points. </li> <li>Course marking is done by 50% attendance, 50% final project.  </li> </ul>"},{"location":"#final-project-assignment","title":"Final Project Assignment","text":"<p>The final project can either be to complete a project in which you apply Python to your own research (encouraged) or in cases where this is not possible, an alternative project will be provided that suits you and your field. If you choose to apply Python to your own research, you can select something that suits you. This could for example be analyzing some newly generated data or automating some data analysis that you previously used excel to do. </p> <p>The final project results will be presented as part of a short seminar in 5 weeks time. I want the final projects to be beneficial to you and your research goals so please consider that priority number one when designing the projects. </p> <p>We will spend Friday planning out the final project. </p>"},{"location":"day1/day1_end/","title":"End of Day Overview","text":"<p>Today we went through some useful tools that can help make your coding experience easier. </p> <p>We then went through some useful built in tools in Python and \"Pythonic\" way to handle errors. </p> <p>Tomorrow we will make a start on using Git and GitHub. This is a really useful and sort after skill. Further, it is a great way to handle versioning of your projects, work with others and share your research. </p>"},{"location":"day1/day1_end/#before-we-begin-tomorrow","title":"Before we Begin Tomorrow","text":"<ul> <li> <p>You should have ideally created a GitHub Account, click here to create one now if not </p> </li> <li> <p>You can also setup 2 factor authentication for your GitHub account which is recommended. I like to use the Google Authenticator app to do this but there are many other viable options. </p> </li> </ul>"},{"location":"day1/day1_end/#extra-resources-related-to-day-1","title":"Extra Resources Related to Day 1:","text":"<ul> <li>Getting Started with Python in VS Code</li> <li>Video on why you should not use bare or non specific exceptions</li> <li>Itertools tutorial</li> </ul>"},{"location":"day1/day1_intro/","title":"Introduction","text":"<p>Day 1 will provide an introduction to the course before going through some useful tools that can help make your coding experience easier. </p> <p>We will then go through some useful tools within the main Python library alongside the \"Pythonic\" way to handle errors. </p>"},{"location":"day1/ides_jupyter/","title":"Integrated Development Environments and Jupyter Notebooks","text":"<p>An integrated development environment (IDE) is an application that helps programmers develop software code efficiently. It increases developer productivity by combining capabilities such as software editing, building, testing, and packaging in an easy-to-use application. Just as writers use text editors and accountants use spreadsheets, software developers use IDEs to make their job easier.</p> <p>For Python, 2 very popular IDEs are PyCharm (left) and VSCode (right).</p> <p> <sub><sup>taken from: https://ritza.co/comparisons/pycharm-vs-spyder-vs-jupyter-vs-visual-studio-vs-anaconda-vs-intellij.html</sup></sub></p> <p>Both are good choices but for this course we will focus on VSCode.</p> <p>Click here to go to the VSCode download page</p> <p>After Installing VScode take a moment to look around and see what you can do with it.</p>"},{"location":"day1/ides_jupyter/#extensions-for-vscode","title":"Extensions for VSCode","text":"<p>We will install the following extensions: </p> <ul> <li>Python</li> <li>Pylance</li> <li>Pylint</li> <li>Jupyter</li> <li>isort</li> <li>black</li> </ul> <p>To do this click on the extensions tab on the far left and search for the above extensions. </p> <p>Optional addition: If you're using Windows subsystem for linux, install the \"WSL\" extension too. </p>"},{"location":"day1/ides_jupyter/#extra-readingwatching","title":"Extra Reading/Watching:","text":"<ul> <li>VSCode Tips and Tricks</li> <li>VSCode Shortcuts</li> </ul>"},{"location":"day1/independent_work/","title":"Independent work","text":""},{"location":"day1/independent_work/#topic-1-error-types","title":"Topic 1: Error Types","text":"<p>Python has many types of errors built in, for example a <code>SyntaxError</code> would be given by the following code:</p> <pre><code>print(\"Hello\"  # Missing closing bracket\n</code></pre> <p>A <code>SyntaxError</code> occurs when the Python interpreter encounters a syntax that violates its grammar rules.</p> <p>Assignment: Learn about some of the most common types of errors. Knowing the type of the error you've raised refers to will help you know how to fix the error. </p> <p>Bonus Question: What tools can be used to help you spot and fix errors in your code before you've even run the code?  </p>"},{"location":"day1/independent_work/#topic-2-context-managers","title":"Topic 2: Context Managers","text":"<p>We covered try except in class but another useful tool in Python is context managers.  </p> <p>The most common place to find a context manager is when reading/writing to files:</p> <pre><code>with open('my_book.txt', 'w') as my_file:\n    my_file.write('The first line of my book')\n</code></pre> <p>Assingment Questions: </p> <ol> <li>What is a context manager and how does they work in Python. </li> <li>Why is the above code considered better than the below version?</li> <li>What are some common use cases for context managers?  </li> </ol> <pre><code>my_file = open('my_book.txt', 'w')\nmy_file.write('The first line of my book')\nmy_file.close()\n</code></pre>"},{"location":"day1/independent_work/#topic-3-the-command-line","title":"Topic 3: The Command Line","text":"<p>If you're not already familiar with working with command lines, it is a really useful skill to have. To name somethings it helps with:</p> <ul> <li>Running Scripts</li> <li>Installing and managing Python packages.</li> <li>Working with version control systems (e.g., Git)</li> <li>Performing file-related operations, such as copying, moving, or deleting files.</li> <li>Connecting to and interacting with computing clusters. </li> </ul> <p>Assignment: Find a tutorial and learn the basics of interacting with a command line. </p> <p>If you're already quite experienced with the command line take a look at this</p>"},{"location":"day1/independent_work/#topic-4-the-stack-trace","title":"Topic 4: The Stack Trace","text":"<p>The Stack trace shows us the parts of the program that was running at the time the code gave an error or threw an exception. The stack trace in python is presented to use using the traceback and understanding the contents of the traceback (the error message we receive) will make you better and understanding how to fix problems in your code. </p> <p>Assignment: Read this tutorial on tracebacks in Python to get a better understanding of how they work. </p>"},{"location":"day1/project_structure/","title":"Project Structure","text":"<p>What is a good way to organize a project folder? That will naturally depend on the project but we can still try to follow some good practices. </p>"},{"location":"day1/project_structure/#some-generic-tips","title":"Some generic tips:","text":"<p>1. Using folders and subfolders to separate different parts of the project.</p> <p>Break parts of the project out into different sections via folders and subfolders where possible and where it makes sense to separate them.  Don't have a single folder where everything is stored as it will be harder to keep track of files. </p> <p>2. Name files in a way that is understandable for future you</p> <p>For example, don't write file names like: <code>try_1.py</code>, <code>this_works.py</code>, <code>updated_data.csv</code></p> <p>Consider how you will keep track of the files you produce. One common approach is to have a README file that describes the project and its parts. This is useful not just for others, but future you as well. </p> <p>3. No spaces or non standard characters for files or folders</p> <p>Using spaces is in general a bad idea, use an <code>_</code> or <code>-</code> instead to separate out words in files and be consistent with what you use. I prefer <code>_</code> but this is up to you.</p> <p>Avoid using characters like: <code>!?/\\</code> in files names or folders. </p> <p>4. New project, new folder</p> <p>It can be tempting to store all your projects inside the same place but this can end up being rather messy. </p> <p>Instead consider doing something like this: </p> <p>In the above, I have an outer folder called <code>projects</code> which stores all of my different projects. So each project has its own folder. Inside the folder is the contents of the project. Each project folder can have as many subfolders/files as makes sense, but only if they are part of that specific project. </p> <ul> <li>If you decide to use Git for version control (discussed tomorrow) this setup will work well with that too. </li> <li>Note in the setup above there are no spaces in the file path to any of these project folders. </li> </ul> <p>5. Numbering folders inside project by order.  If we have a data processing pipeline made up of 5 steps, we could consider numbering each folder from for example 1 - 5. </p> <pre><code>1_raw_data\n2_filtered_data\n3_normalized_data\n4_models_fitted\n5_model_description\n</code></pre> <p>Keep in mind that these are just suggestions. </p>"},{"location":"day1/project_structure/#discussion-time","title":"Discussion time","text":"<p>Feel free to share any thoughts you have on what are good practices for structuring a project. Or alternatively, things to avoid. </p>"},{"location":"day1/project_structure/#further-reading","title":"Further Reading","text":"<ul> <li>Cookiecutter Data Science Project Structure. Described as: \"A logical, reasonably standardized, but flexible project structure for doing and sharing data science work.\" In the description of this project template, it encourages you to adapt the project structure to your own needs. But it does provide a good starting point. </li> </ul>"},{"location":"day1/try_except/","title":"Handling Exceptions","text":"<p>Exceptions happen when an error occurs when running Python code. </p> <p>If an exception occurs it will cause the program to crash/exit straight away and leave us a traceback explaining what occurred and where: </p> <p>For example, if we were to run the following code:</p> <pre><code># file named example.py\ndef greet(someone):\n    print('Hello, ' + someon)\n\ngreet('Chad')\n</code></pre> <p>We would see this:</p> <pre><code>$ python example.py\nTraceback (most recent call last):\n  File \"/path/to/example.py\", line 4, in &lt;module&gt;\n    greet('Chad')\n  File \"/path/to/example.py\", line 2, in greet\n    print('Hello, ' + someon)\nNameError: name 'someon' is not defined\n</code></pre> <p>Sometimes an error is not so serious that we want to stop our program completely. Sometimes an error is completely expected and instead we want to handle the error without crashing our program altogether. To do this we need to \"catch\" the exception using a try except block.  </p>"},{"location":"day1/try_except/#catching-exceptions-with-try-except","title":"Catching Exceptions with Try Except","text":"<p>The image below shows a simple example of the layout of a try except block. </p> <p> <sub><sup>Image taken from RealPython: https://realpython.com/python-exceptions/ </sup></sub></p> <p>This works out effectively as: </p> <pre><code>try:\n    [trying to do something that may given an error]\nexcept [a specific error]:\n    [if the error occurred, I can handle it here before continuing]\n</code></pre> <p>Here is a simple example try except block: </p> <pre><code>try:\n    with open('file.log') as file:\n        read_data = file.read()\nexcept FileNotFoundError as fnf_error:\n    print(fnf_error)\n</code></pre> <p>Here the program that contains this code will not crash if the file <code>file.log</code> is not found. Instead the <code>FileNotFoundError</code> will be raised and caught and then printed to the screen, but the program will continue running. </p>"},{"location":"day1/try_except/#the-tempting-and-classic-mistake-a-blank-except","title":"The tempting and classic mistake, a blank except","text":"<p>This should be avoided: </p> <pre><code>try:\n    [code where we try to do something]\nexcept: \n    pass # ignores the exception and does nothing about it. \n</code></pre> <p>The problem here is not writing <code>pass</code> (as in some cases, just carrying on is what you want to do). The problem here is writing a blank <code>except</code> line. </p> <p>This code will catch all exceptions, including things you might not think are exceptions such as: SystemExit, KeyboardInterrupt (typing ctrl-c on your keyboard to crash the program), and MemoryError.</p> <p>Whilst not as bad, this should also be avoided: </p> <pre><code>try:\n    [code where we try to do something]\nexcept Exception: \n    [some more code here]\n</code></pre> <p>This is better as now things like SystemExit, KeyboardInterrupt and MemoryError will cause the program to crash (which we would want) but we still run the risk that we catch the wrong exception. This could lead to our program behaving unexpectedly. It's therefore better to be specific with your exceptions. </p> <p>If there are multiple exceptions possible in you code, you can do something like the following instead:</p> <pre><code>try:\n    # Some code that may raise an exception\nexcept FileNotFoundError:\n    print(\"File not found.\")\nexcept ValueError:\n    print(\"Invalid value.\")\nexcept Exception as e:\n    print(f\"An unexpected error occurred: {e}\")\n</code></pre> <p>So handle each exceptions as they need to be handled. </p>"},{"location":"day1/try_except/#another-classic-mistake-too-long-try-except-blocks","title":"Another classic mistake, too long try except blocks","text":"<p>A good rule is that the try except block should be as small as possible. This will help make your code easier to read. </p> <p>Take the code below as an example:</p> <pre><code>file_path = 'example.txt'\n\ntry:\n    with open(file_path, 'r') as file:\n        content = file.read()        \n        if content != None:\n            numb_lines = determine_numb_lines(content)\n            print(f\"The number of lines in the file is {numb_lines}\")\n\nexcept FileNotFoundError:\n    print(f\"File not found: {file_path}\")\n    content = None\n</code></pre> <p>The problem here is that the try block is to large. It contains lines of code that have nothing to do with the <code>FileNotFoundError</code>. </p> <p>We should instead write:</p> <pre><code>file_path = 'example.txt'\n\ntry:\n    with open(file_path, 'r') as file:\n        content = file.read()        \nexcept FileNotFoundError:\n    print(f\"File not found: {file_path}\")\n    content = None\n\nif content != None:\n    numb_lines = determine_numb_lines(content)\n    print(f\"The number of lines in the file is {numb_lines}\")\n</code></pre>"},{"location":"day1/try_except/#exercise","title":"Exercise:","text":"<p>See if you can find some common use cases for try-excepts in Python. We've already seen handling file operations (e.g. FileNotFoundError). </p>"},{"location":"day1/try_except/#more-try-except-settings","title":"More try except settings:","text":"<p> <sub><sup>Image taken from RealPython: https://realpython.com/python-exceptions/ </sup></sub></p> <p>As the image shows, there are two additional parts to a try-except block in Python, <code>else</code> and <code>finally</code>. I don't find I often use them but they are good to be aware of. </p>"},{"location":"day1/try_except/#warning-vs-errors","title":"Warning vs Errors","text":"<p>On the topic of errors and exceptions it is worth discussing warnings. </p> <p>As explained on geeksforgeeks.org:</p> <p>Warnings are provided to warn the developer of situations that aren\u2019t necessarily exceptions. Usually, a warning occurs when there is some obsolete of certain programming elements, such as keyword, function or class, etc. A warning in a program is distinct from an error. Python program terminates immediately if an error occurs. Conversely, a warning is not critical. It shows some message, but the program runs. The warn() function defined in the \u2018warning\u2018 module is used to show warning messages. The warning module is actually a subclass of Exception which is a built-in class in Python.</p> <p>The point to consider here is that when we get a warning, what we are doing may or may not be wrong/dangerous. It's up to us as the programmer to figure that out. </p>"},{"location":"day1/try_except/#further-reading","title":"Further Reading","text":"<ul> <li>Try except tutorial with theory</li> <li>This is a nice youtube video that covers try/except</li> <li>Tutorial on how to raise your own exceptions</li> </ul>"},{"location":"day1/useful_python_functionality/","title":"Useful Python Functionality","text":"<p>This is a non exhaustive demonstration of some useful functionality within Python that I think can be good to know about.</p> In\u00a0[\u00a0]: Copied! <pre>some_numbers = [10, 5, 10.11]\ntype(some_numbers), type(some_numbers[0])\n</pre> some_numbers = [10, 5, 10.11] type(some_numbers), type(some_numbers[0]) <p>This also works for third party libraries</p> In\u00a0[\u00a0]: Copied! <pre>import numpy as np \ntype(np.array(some_numbers))\n</pre> import numpy as np  type(np.array(some_numbers)) In\u00a0[\u00a0]: Copied! <pre>dir(some_numbers)\n</pre> dir(some_numbers) <p>Here for example we can see the methods \"append\", \"insert\", \"pop\", \"remove\" can be used on this object of type list.</p> In\u00a0[\u00a0]: Copied! <pre>some_list = ['a', 'b', 'c', 'b', 'd', 'm', 'n', 'n']\nunique_values = list(set(some_list)) # wrapping it inside list makes it a list again\nunique_values\n</pre> some_list = ['a', 'b', 'c', 'b', 'd', 'm', 'n', 'n'] unique_values = list(set(some_list)) # wrapping it inside list makes it a list again unique_values In\u00a0[\u00a0]: Copied! <pre>fruits = ['apple', 'banana', 'orange', 'apple', 'grape', 'apple', 'banana']\n</pre> fruits = ['apple', 'banana', 'orange', 'apple', 'grape', 'apple', 'banana'] <p>We could do:</p> In\u00a0[\u00a0]: Copied! <pre>unique_fruits = set(fruits)\n\nfruit_counts = {}\nfor fruit in unique_fruits:\n    count = fruits.count(fruit)\n    fruit_counts[fruit] = count\nprint(fruit_counts)\n</pre> unique_fruits = set(fruits)  fruit_counts = {} for fruit in unique_fruits:     count = fruits.count(fruit)     fruit_counts[fruit] = count print(fruit_counts) <p>We could instead use the built in Counter class to do the same job:</p> In\u00a0[\u00a0]: Copied! <pre>from collections import Counter\nfruit_counts = dict(Counter(fruits))\n\nprint(fruit_counts)\n</pre> from collections import Counter fruit_counts = dict(Counter(fruits))  print(fruit_counts) In\u00a0[\u00a0]: Copied! <pre>travel_distances_stockholm = {\n    'Oslo': 400,\n    'Copenhagen': 600,\n    'Helsinki': 800,\n    'Berlin': 1200,\n    'Warsaw': 1500,\n    'Amsterdam': 1100,\n    'Paris': 1400,\n}\n</pre> travel_distances_stockholm = {     'Oslo': 400,     'Copenhagen': 600,     'Helsinki': 800,     'Berlin': 1200,     'Warsaw': 1500,     'Amsterdam': 1100,     'Paris': 1400, } In\u00a0[\u00a0]: Copied! <pre>for city in travel_distances_stockholm: # same as travel_distances_stockholm.keys()\n    print(city)\n</pre> for city in travel_distances_stockholm: # same as travel_distances_stockholm.keys()     print(city) In\u00a0[\u00a0]: Copied! <pre>for distance in travel_distances_stockholm.values():\n    print(distance)\n</pre> for distance in travel_distances_stockholm.values():     print(distance) In\u00a0[\u00a0]: Copied! <pre>for city, distance in travel_distances_stockholm.items():\n    print(f\"The city {city}, is {distance} km from Stockholm.\")\n</pre> for city, distance in travel_distances_stockholm.items():     print(f\"The city {city}, is {distance} km from Stockholm.\") In\u00a0[\u00a0]: Copied! <pre>fruits = ['apple', 'banana', 'orange', 'grape']\n</pre> fruits = ['apple', 'banana', 'orange', 'grape'] In\u00a0[\u00a0]: Copied! <pre># without enumerate\nindex = 0\nfor fruit in fruits:\n    print(f\"Index {index}: {fruit}\")\n    index += 1\n</pre> # without enumerate index = 0 for fruit in fruits:     print(f\"Index {index}: {fruit}\")     index += 1 In\u00a0[\u00a0]: Copied! <pre># with enumerate\nfor index, fruit in enumerate(fruits):\n    print(f\"Index {index}: {fruit}\")\n</pre> # with enumerate for index, fruit in enumerate(fruits):     print(f\"Index {index}: {fruit}\") <p>Bonus: Enumerate starts the index counting by default from 0, we can change this to be any number using the <code>start</code> parameter.</p> In\u00a0[\u00a0]: Copied! <pre>for item_numb, fruit in enumerate(fruits, start=1):\n    print(f\"Item Number {item_numb}: {fruit}\")\n</pre> for item_numb, fruit in enumerate(fruits, start=1):     print(f\"Item Number {item_numb}: {fruit}\") In\u00a0[\u00a0]: Copied! <pre>cities = ['New York', 'London', 'Paris', 'Tokyo']\npopulations = [8175133, 8982000, 2140526, 13929286]\n</pre> cities = ['New York', 'London', 'Paris', 'Tokyo'] populations = [8175133, 8982000, 2140526, 13929286] <ol> <li>to loop through two objects with the same indexes.</li> </ol> In\u00a0[\u00a0]: Copied! <pre>for city, population in zip(cities, populations):\n    print(f\"the city {city} has a population of {population}\")\n</pre> for city, population in zip(cities, populations):     print(f\"the city {city} has a population of {population}\") <ol> <li>Merge two lists together to make a dictionary</li> </ol> In\u00a0[\u00a0]: Copied! <pre>city_populations_dict = dict(zip(cities, populations))\nprint(city_populations_dict)\n</pre> city_populations_dict = dict(zip(cities, populations)) print(city_populations_dict) In\u00a0[\u00a0]: Copied! <pre># example 1: with list comprehension:\nsquares = [num ** 2 for num in range(1, 5+1)]\nsquares\n</pre> # example 1: with list comprehension: squares = [num ** 2 for num in range(1, 5+1)] squares In\u00a0[\u00a0]: Copied! <pre># example 1, using a traditional for loop\nsquares = []\nfor num in range(1, 5+1):\n    squares.append(num ** 2)\nsquares\n</pre> # example 1, using a traditional for loop squares = [] for num in range(1, 5+1):     squares.append(num ** 2) squares <p>Warning! - do not use list comprehensions when there is a lot of logic involved, it gets hard to read very quickly, stick to a normal for loop</p> In\u00a0[\u00a0]: Copied! <pre># Example 2: Using a traditional for loop\nsquares = []\nfor num in range(10):\n    if num % 2 == 0: # if number even\n        squares.append(num ** 2) # square it. \nprint(squares)\n</pre> # Example 2: Using a traditional for loop squares = [] for num in range(10):     if num % 2 == 0: # if number even         squares.append(num ** 2) # square it.  print(squares) In\u00a0[\u00a0]: Copied! <pre># Example 2: Using list comprehension\nsquares_compact = [num ** 2 for num in range(10) if num % 2 == 0]\nprint(squares)\n</pre> # Example 2: Using list comprehension squares_compact = [num ** 2 for num in range(10) if num % 2 == 0] print(squares) <p>Example 2 is about the limit of how complicated a list comprehension should be (I think).</p> In\u00a0[\u00a0]: Copied! <pre># example 1, using dict comprehension\nsquares_dict = {num: num ** 2 for num in range(1, 5+1)}\nprint(squares_dict)\n</pre> # example 1, using dict comprehension squares_dict = {num: num ** 2 for num in range(1, 5+1)} print(squares_dict) In\u00a0[\u00a0]: Copied! <pre># example 1, using a traditional for loop\nsquares_dict = {}\nfor num in range(1, 5+1):\n    squares_dict[num] = num ** 2\nprint(squares_dict)\n</pre> # example 1, using a traditional for loop squares_dict = {} for num in range(1, 5+1):     squares_dict[num] = num ** 2 print(squares_dict) In\u00a0[\u00a0]: Copied! <pre>import itertools\nword_permutations = list(itertools.permutations(\"ABC\", r=2))\nprint(word_permutations)\n</pre> import itertools word_permutations = list(itertools.permutations(\"ABC\", r=2)) print(word_permutations) In\u00a0[\u00a0]: Copied! <pre>word_combinations = list(itertools.combinations('ABCD', r=2))\nprint(word_combinations)\n</pre> word_combinations = list(itertools.combinations('ABCD', r=2)) print(word_combinations) In\u00a0[\u00a0]: Copied! <pre>NUM_DICE = 2\nDICE_MIN = 1\nDICE_MAX = 6\n\ndice_outcomes = list(itertools.product(range(DICE_MIN, DICE_MAX+1), repeat=NUM_DICE))\nprint(f\"for {NUM_DICE} dice, there are {len(dice_outcomes)} possible outcomes\")\n</pre> NUM_DICE = 2 DICE_MIN = 1 DICE_MAX = 6  dice_outcomes = list(itertools.product(range(DICE_MIN, DICE_MAX+1), repeat=NUM_DICE)) print(f\"for {NUM_DICE} dice, there are {len(dice_outcomes)} possible outcomes\") In\u00a0[1]: Copied! <pre>from datetime import datetime, timedelta\n\n# Get the current date and time\ncurrent_datetime = datetime.now()\nprint(f\"Current Date and Time: {current_datetime}\")\n\n# Create a specific date and time\nspecific_datetime = datetime(2022, 12, 31, 23, 59, 59)\nprint(f\"Specific Date and Time: {specific_datetime}\")\n\n# Calculate the difference between two dates\ntime_difference = specific_datetime - current_datetime\nprint(f\"Time Difference: {time_difference}\")\n\n# Add a specific duration to a date\nnew_datetime = current_datetime + timedelta(days=7)\nprint(f\"New Date after Adding 7 Days: {new_datetime}\")\n</pre> from datetime import datetime, timedelta  # Get the current date and time current_datetime = datetime.now() print(f\"Current Date and Time: {current_datetime}\")  # Create a specific date and time specific_datetime = datetime(2022, 12, 31, 23, 59, 59) print(f\"Specific Date and Time: {specific_datetime}\")  # Calculate the difference between two dates time_difference = specific_datetime - current_datetime print(f\"Time Difference: {time_difference}\")  # Add a specific duration to a date new_datetime = current_datetime + timedelta(days=7) print(f\"New Date after Adding 7 Days: {new_datetime}\")  <pre>Current Date and Time: 2024-01-07 15:04:24.720473\nSpecific Date and Time: 2022-12-31 23:59:59\nTime Difference: -372 days, 8:55:34.279527\nNew Date after Adding 7 Days: 2024-01-14 15:04:24.720473\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"day1/useful_python_functionality/#1-find-out-the-type-of-an-object-using-the-type-function","title":"1. Find out the type of an object using the type() function.\u00b6","text":"<p>Note, if your using an IDE, you should be able to hover over the object and it will tell you the type too.</p>"},{"location":"day1/useful_python_functionality/#2-find-out-the-attributes-available-to-any-object","title":"2. Find out the attributes available to any object\u00b6","text":"<p>With this, we can obtain a list some_numbers we can see the methods we can make use of.</p>"},{"location":"day1/useful_python_functionality/#3-using-set-on-a-list","title":"3. Using set on a list\u00b6","text":"<p>Sets are very similar to lists with 2 main exceptions:</p> <ol> <li>They can not contain duplicate values.</li> <li>They do not preserve order</li> </ol> <p>This first feature is useful for finding all the unique elements of a list</p>"},{"location":"day1/useful_python_functionality/#4-there-are-a-lot-of-built-in-functions-that-can-come-in-handy","title":"4. There are a lot of built in functions that can come in handy\u00b6","text":"<p>As an example lets take the below example of counting the number of occurences of each fruit in the list fruits.</p>"},{"location":"day1/useful_python_functionality/#5-looping-through-dictionaries","title":"5. Looping through dictionaries\u00b6","text":"<p>Depending on if we want to get the keys, values or both out of a dictionary, we can use the appropriate method.</p>"},{"location":"day1/useful_python_functionality/#6-enumerate","title":"6. Enumerate\u00b6","text":"<p>Enumerate allows us to iterate over the index and contents of a sequence like a list, tuple or set.</p>"},{"location":"day1/useful_python_functionality/#7-zip","title":"7. Zip\u00b6","text":"<p>Zip can be used to combine two lists (or other type of iterable object together). It has two main use cases.</p>"},{"location":"day1/useful_python_functionality/#8-list-comprehensions","title":"8. List Comprehensions\u00b6","text":"<p>A way to create a new list on 1 line of code</p> <p>basic syntax is as follows: new_list = [expression for item in iterable if condition]</p>"},{"location":"day1/useful_python_functionality/#9-other-types-of-comprehensions","title":"9. Other Types of Comprehensions\u00b6","text":"<p>We can do the same for dictionaries, sets and other python objects that store data.</p> <p>I find I don't tend to do this very often though.</p>"},{"location":"day1/useful_python_functionality/#10-the-itertools-library","title":"10. The Itertools Library\u00b6","text":"<p>Click here for a detailed article on itertools</p> <p>Some examples are shown below.</p>"},{"location":"day1/useful_python_functionality/#11-the-datetime-library","title":"11. The datetime library\u00b6","text":"<p>See the documentation for even more details</p> <p>Some example uses below</p>"},{"location":"day1/virtual_environments/","title":"Virtual Environments","text":""},{"location":"day1/virtual_environments/#what-is-a-virtual-environment","title":"What is a virtual environment?","text":"<p>A virtual environment in Python is a self-contained directory or folder that allows you to create and manage isolated Python environments for your projects. With environments you can easy manage your dependencies and avoid conflicts with different versions of python.</p> <p>Virtual environments are used to:</p> <ul> <li>Contain a specific Python interpreter and software libraries and binaries which are needed to support a project (library or application). These are by default isolated from software in other virtual environments and Python interpreters and libraries installed in the operating system.</li> <li>Contained in a directory, conventionally either named venv or .venv in the project directory, or under a container directory for lots of virtual environments, such as ~/.virtualenvs.</li> <li>Considered disposable \u2013 it should be simple to delete and recreate it from scratch. You don\u2019t place any project code in the environment. </li> <li>Not considered as movable or copyable \u2013 you just recreate the same environment in the target location. This is also means we don't share them with others, instead we tell them how to make the equivalent environment on their pc. </li> </ul> <p>Python has several ways to create and manage virtual environments: </p> <p></p> <p>The 4 most well known are shown in the picture above and are:</p> <ul> <li>conda</li> <li>Poetry</li> <li>Mamba</li> <li>Virtualenv</li> </ul>"},{"location":"day1/virtual_environments/#some-practical-considerations","title":"Some practical considerations","text":"<ol> <li>Don\u2019t worry too much about which of the above you use, just pick one. </li> <li>General rule: Each new project gets its own virtual environment</li> <li>When it comes to choosing the version of Python to use, unless you have a specific reason not to, pick the latest stable version (currently 3.11). You can check when you go to install a specific package if it has requirements for a specific Python version. </li> </ol> <p>For the entirety of this course we'll use conda. Conda comes in two versions: Anaconda, and Miniconda. Anaconda has a graphical user interface attached to it, Miniconda is just used through the command line. I prefer Miniconda but either is fine.  </p>"},{"location":"day1/virtual_environments/#installing-conda-instructions","title":"Installing Conda Instructions","text":"<p>Follow the guides below. </p> <ul> <li> <p>Windows</p> </li> <li> <p>Linux</p> </li> <li> <p>MacOS</p> </li> </ul> <p>Creating a Virtual Environment with Conda <pre><code>conda create -n environment_name python=3.11\nconda activate environment_name\n</code></pre></p> <ol> <li> <p>rename environment_name to something sensible for the given project. </p> </li> <li> <p>You'll know you've successfully activated the environment if the environment name is shown in brackets before the terminal.  </p> </li> </ol>"},{"location":"day1/virtual_environments/#installing-programs","title":"Installing programs","text":"<p>Let's first look at an example from a one of Python's major libraries used to make graphs, plotly:</p> <p>Here we see options to use either conda or pip to install the package.  </p> <p>When it comes to installing multiple programs at once you can simply list them one after the other. </p> <pre><code>pip install numpy pandas\n</code></pre> <p>We can also install a list of programs (usually called <code>requirements.txt</code>) using either conda or pip:</p> <pre><code>pip install -r requirements.txt\n# or \nconda install --file requirements.txt \n</code></pre>"},{"location":"day1/virtual_environments/#conda-vs-pip-installing","title":"conda vs pip installing:","text":"<p>From conda's documentation:</p> <p>Issues may arise when using pip and conda together. When combining conda and pip, it is best to use an isolated conda environment. Only after conda has been used to install as many packages as possible should pip be used to install any remaining software. If modifications are needed to the environment, it is best to create a new environment rather than running conda after pip. When appropriate, conda and pip requirements should be stored in text files.</p>"},{"location":"day1/virtual_environments/#sharing-your-environment-using-conda","title":"Sharing your environment using Conda:","text":"<p>To share your environment with others or yourself (if for example, you have both a pc and desktop or you want to install something on a computing cluster) you can make a copy of your current environment using: </p> <pre><code>conda env export &gt; environment.yml\n</code></pre> <p>This creates a file <code>environment.yml</code> which can then be used to create a new environment with the following command:</p> <pre><code>conda env create -f environment.yml\n</code></pre> <p>Note that you can change the environment name by modifying the first line of the <code>environment.yml</code> file. </p> <p>The instructions for this are described in more detail here</p>"},{"location":"day1/virtual_environments/#sharing-your-environment-using-pip","title":"Sharing your environment using Pip:","text":"<p>We can do effectively the same thing with pip using the freeze command</p> <pre><code>python -m pip freeze &gt; requirements.txt\n</code></pre> <pre><code># example contents of requirements.txt\ndocutils==0.11\nJinja2==2.7.2\nMarkupSafe==0.19\nPygments==1.6\nSphinx==1.2.2\n</code></pre> <p>Now to install the <code>requirements.txt</code> file. <pre><code>python -m pip install -r requirements.txt\n</code></pre></p>"},{"location":"day1/virtual_environments/#install-requirements","title":"Install Requirements","text":"<p>Inside a <code>requirements.txt</code> file you might see the following symbols associated with the a given Python package (in this case named \"SomeProject\"). </p> <pre><code>SomeProject\nSomeProject == 1.3\nSomeProject &gt;= 1.2, &lt; 2.0\n</code></pre> <p>These are constraints on the version of the package that can be used. This will be read by the installer. </p>"},{"location":"day1/virtual_environments/#what-about-containers","title":"What about Containers?","text":"<p>Containers which can be created and run by programs like Docker and Singularity offer a very robust way to create a reproducible environment through creating \"containers\". For most programming projects involving scientific data analysis, virtual environments should suffice, so these are not covered in this course. If you do plan to learn a tool to run/make Containers, consider that the university's HPC prefer Singularity over Docker.</p>"},{"location":"day1/virtual_environments/#extra-readingwatching","title":"Extra Reading/Watching:","text":"<ul> <li>Conda commands cheat sheet</li> <li>requirements.txt file format</li> </ul>"},{"location":"day2/day2_end/","title":"End of Day Overview","text":"<p>Today focussed on using Git and GitHub for version control and then how to write cleaner code in Python. </p>"},{"location":"day2/day2_end/#resources-for-git-and-github","title":"Resources for Git and GitHub","text":"<p>I can very strongly recommend (as I took it a while ago) this tutorial on Git and GitHub from CodeRefinery. These are run occasionally in Uppsala (click here to see upcoming CodeRefinery events). It's much more thorough than what we went through as well.  </p> <p>This book (available online and free) is essentially the ultimate resource for Git. </p>"},{"location":"day2/day2_end/#resources-for-writing-cleaner-code","title":"Resources for Writing Cleaner Code","text":"<ul> <li>The pep8 style guide.</li> <li>This Youtube channel talks a lot about how to write better/cleaner code in Python.</li> </ul>"},{"location":"day2/day2_intro/","title":"Introduction","text":"<p>Today will focus on using Git and GitHub for version control and then how to write cleaner code in Python. </p>"},{"location":"day2/day2_intro/#before-the-session-on-git-and-github","title":"Before the session on Git and GitHub:","text":"<ul> <li> <p>You should have ideally created an account on GitHub, click here to create one now if not </p> </li> <li> <p>You can also setup 2 factor authentication for your GitHub account which is recommended. I like to use the Google Authenticator app to do this but there are many other viable options. </p> </li> </ul>"},{"location":"day2/f_strings/","title":"F-Strings","text":"<p>In Python, an f-string, or formatted string literal, is a way to embed expressions inside strings by using curly braces <code>{}</code>. F-strings were introduced in Python 3.6 and are considered the best practice way to format a string.</p> <p>To create an f-string, you prefix the string with the letter 'f' or 'F' and then include expressions inside curly braces. The expressions inside the curly braces are evaluated at runtime and their values are inserted into the string.</p> <p>Here's a simple example:</p> <pre><code>name = \"Alice\"\nage = 30\nmessage = f\"Hello, my name is {name} and I am {age} years old.\"\nprint(message)\n</code></pre> <p>This will output:</p> <pre><code>Hello, my name is Alice and I am 30 years old.\n</code></pre> <p>Note that f-strings work with both single (<code>\"</code> or <code>'</code>) and triple (<code>\"\"\"</code> or <code>'''</code>) quotes meaning you can also write multi-line statements with ease.</p>"},{"location":"day2/f_strings/#why-use-an-f-string","title":"Why Use an F-string?","text":"<p>There are many ways to format strings, but f-strings are generally considered the best/most readable way. Compare the f-string we wrote above to the following approaches:</p> <p>1. Using % Formatting: <pre><code># awkward especially when you have many parameters.\nname = \"Alice\"\nage = 30\nmessage = \"Hello, my name is %s and I am %d years old.\" % (name, age)\n</code></pre></p> <p>2. Using Concatenation: <pre><code># awkward because have to take care to get the spacing correct.\nname = \"Alice\"\nage = 30\nmessage = \"Hello, my name is \" + name + \" and I am \" + str(age) + \" years old.\"\n</code></pre></p>"},{"location":"day2/f_strings/#f-strings-can-directly-evaluate-expressions-and-run-functions","title":"f-strings can directly evaluate expressions and run functions","text":"<p>An f-string can directly evaluate expressions and run functions.  </p> <p>For example, below the expression <code>a + b</code> is determined inside the expression:  <pre><code>a = 5\nb = 7\nresult = f'The sum of {a} and {b} is {a + b}'\n</code></pre></p> <p>In the example below, we call the function <code>square</code> inside the function.  <pre><code>def square(x):\n    return x ** 2\n\nnum = 4\nresult = f'The square of {num} is {square(num)}'\n</code></pre></p>"},{"location":"day2/f_strings/#f-string-formatting","title":"f-string formatting","text":"<p>You can also format the presentation of numerical values, such as specifying the number of decimal places for a floating-point number.</p> <p>Here are some examples: </p> <pre><code># control decimal places\npi = 3.141592653589793\nprint(f\"The value of pi is approximately {pi:.2f}.\")\n# output: The value of pi is approximately 3.14.\n</code></pre> <pre><code># use scientific notation\nlarge_number = 1000000\nprint(f\"The number in scientific notation: {large_number:.2e}.\")\n# output: \"The number in scientific notation: 1.00e+06.\"\n</code></pre> <pre><code># add commas between each 1000\npopulation = 1000000\nprint(f\"The formatted population is: {population:,}.\")\n# output: The formatted population is: 1,000,000.\n</code></pre> <pre><code># convert between decimal to percentage\nsuccess_rate = 0.85\nprint(f\"The success rate as a percentage: {success_rate:.1%}.\")\n# output: The success rate as a percentage: 85.0%.\n</code></pre>"},{"location":"day2/f_strings/#f-strings-for-print-debugging","title":"f-strings for print debugging.","text":"<p>If you ever do print debugging, it is good to know about the <code>=</code> symbol. This will mean both the variable's name and contents will be printed to the screen.</p> <p>For example:</p> <pre><code>student = \"Tim\"\nclasses = [\"chemistry\", \"history\", \"french\"]\ngrades = [90, 85, 92]\n\n# Print debugging using f-strings with variable names\nprint(f\"{student=}\")\nprint(f\"{classes=}\")\nprint(f\"{grades=}\")\n</code></pre> <p>This will output:</p> <pre><code>student='Tim'\nclasses=['chemistry', 'history', 'french']\ngrades=[90, 85, 92]\n</code></pre> <p>Essentially, by using {variable_name=}, you not only print the value of the variable but also its name. This can be useful when you have many variables and want to quickly identify which variable is associated with each value.</p>"},{"location":"day2/f_strings/#bonus-raw-strings","title":"Bonus - raw strings","text":"<p>In Python, a raw string is a string prefixed with an <code>r</code> or <code>R</code> (doesn't make any difference which you use). Raw strings are used to treat backslashes <code>(\\)</code> as literal characters, rather than as escape characters. This can be particularly useful in scenarios where you want to work with regular expressions, file paths, or any other strings containing backslashes without having to escape them.</p> <p>Raw strings come in handy when for example working with windows file paths:</p> <pre><code>file_path = r\"C:\\Users\\Username\\Documents\\example.txt\"\nprint(file_path)\n</code></pre> <p>Meaning you don't need to escape all of the backslashes <code>(\\)</code> in the file path. </p> <p>Another place they can come in handy is when working with regular expressions, which will be covered in more detail tomorrow:  <pre><code>import re\npattern = r\"\\d+\"\ntext = \"There are 42 apples and 18 oranges.\"\nresult = re.findall(pattern, text)\nprint(result)  # Output: ['42', '18']\n</code></pre> In the example above, the regex pattern <code>r\"\\d+\"</code> is a raw string, and is used to extract all the digits from the text. </p> <p>Finally, note that you can combine a raw and f-string together (the ordering of the <code>r</code> and <code>f</code> does not matter in the example below)</p> <pre><code>files = [\"example_1.txt\", \"example_2.txt\", \"example_3.txt\"]\n\nfor file in files:\n    file_path = rf\"C:\\Users\\Username\\Documents\\{file}\"\n    print(file_path)\n</code></pre> <p>This would output the following:  <pre><code>C:\\Users\\Username\\Documents\\example_1.txt\nC:\\Users\\Username\\Documents\\example_2.txt\nC:\\Users\\Username\\Documents\\example_3.txt\n</code></pre></p>"},{"location":"day2/f_strings/#extra-content-related-to-f-strings","title":"Extra content related to f-strings:","text":"<ul> <li>Youtube tutorial</li> <li>RealPython article</li> </ul>"},{"location":"day2/format_script/","title":"Formatting a Python Script","text":"<p>In this section, we will look at to how format a simple Python script. We can talk through the different parts of this script together.</p>"},{"location":"day2/format_script/#basic-script-layout","title":"Basic script Layout:","text":"<p>Below is a basic script to demonstrate some good practices when writing scripts. </p> <pre><code>\"\"\"\nDocstring describing what this file does and any key bits of info\nsomeone reading this should know. \n\"\"\"\n\n# Standard library imports\nimport sys\nfrom datetime import datetime\n\n# Third-party library imports\nimport numpy as np\n\n# Constants\nINPUT_FILE = r\"some_foler/input.csv\"\nOUTPUT_FILE = r\"some_foler/output.csv\"\nMULTIPLICATION_FACTOR = 2\n\n\n# Helper function \ndef process_data(input_data: np.ndarray, multiply_by: float) -&gt; np.ndarray:\n    \"\"\"\n    Process the input data.\n\n    Parameters\n    ----------\n    input_data: np.ndarray, \n\n    multiply_by: float\n        Amount to multiply each value inside data by. \n\n    Returns\n    ----------\n    np.ndarray: The processed data.\n    \"\"\"\n    processed_data = input_data * multiply_by\n    return processed_data\n\ndef main():\n    \"\"\"\n    Main function of the script.\n    Where all the different parts of the code come together. \n    \"\"\"\n    input_data = np.genfromtxt(INPUT_FILE, delimiter=\",\", skip_header=1)\n\n    processed_data = process_data(input_data, multiply_by=MULTIPLICATION_FACTOR)\n\n    np.savetxt(\n        fname=OUTPUT_FILE,\n        X=processed_data,\n        delimiter=\",\"\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"day2/format_script/#in-the-above-script-we-used-the-following-good-practices","title":"In the above script we used the following good practices:","text":"<ul> <li> <p>Localizing Imports: Import statements are placed at the beginning of the script, separating standard library imports from third-party library imports. This follows the recommended practice of organizing imports. Imports are not placed throughout the script either. </p> </li> <li> <p>Descriptive Constants: Descriptive constants (DATA_FILE, OUTPUT_FILE, MULTIPLICATION_FACTOR) are used to represent values that might be reused or modified in the script. </p> </li> <li> <p>Helper Functions: The process_data helper function helps to encapsulate specific functionalities, promoting modularity and readability.</p> </li> <li> <p>Documentation and Type Hints: The module and functions used are documented and type hints are provided. </p> </li> <li> <p><code>If __name__ == \"__main__\": Block:</code> The script includes an <code>if __name__ == \"__main__\":</code> block to ensure that the main function is executed only when the script is run directly, not when it's imported as a module.</p> </li> </ul>"},{"location":"day2/format_script/#two-things-to-avoid-in-your-scripts","title":"Two things to avoid in your scripts:","text":""},{"location":"day2/format_script/#1-using-import","title":"1. Using \"import *\"","text":"<pre><code>from somepackage import *\nfrom numpy import *\n</code></pre> <p>This causes two main issues:</p> <ul> <li> <p>Namespace Cluttering: All names from the module are brought into the current namespace, leading to namespace cluttering, making it unclear which names come from the imported module. Consider that python has a built in <code>add</code> function and so does NumPy, so it will not be clear which one you are calling when you write <code>add</code>.</p> </li> <li> <p>Readability: Explicitly importing only the names you need makes the code more readable. Readers can easily identify where each function or class comes from without having to go back up to the top</p> </li> </ul> <p>Do instead: </p> <pre><code>import somepackage\nimport numpy as np\n</code></pre> <p>Note as well that if you only need to use a few things from a package (e.g. <code>sklearn</code>) it can also make sense to just import the objects you need directly, for example:</p> <pre><code>import numpy as np\nfrom sklearn.preprocessing import StandardScaler, KBinsDiscretizer\nfrom sklearn.compose import ColumnTransformer\n</code></pre>"},{"location":"day2/format_script/#2-hardcoding-file-paths","title":"2. Hardcoding file paths","text":"<p>Instead of hardcoding file paths, use relative paths or configuration files to specify file locations. This improves code portability (usability by others/yourself on another platform). If you need to add file paths to your script consider adding them as constants towards the top of the file, do not bury them somewhere inside the script.</p>"},{"location":"day2/git_and_github/","title":"Git and GitHub Combined","text":""},{"location":"day2/git_and_github/#part-21-make-it-easy-to-connect-with-github-via-git","title":"Part 2.1, Make it easy to connect with GitHub via Git","text":"<p>To do this we'll follow a short pre-existing tutorial on exactly that.. Follow the steps for SSH setup.</p>"},{"location":"day2/git_and_github/#part-22-make-a-new-repository-with-github","title":"Part 2.2, Make a new repository with GitHub","text":"<p>Using GitHub to create the repository can be quite useful as you can get some useful files for free:</p> <ul> <li>README - this will be displayed on the front page of the repository making it a great place to provide a summary of the project.</li> <li>.gitignore - Language specific .gitignore files with plenty of file extensions you wont want to upload to GitHub already defined for you.</li> <li>License - A license file for your project (if you're not sure what license to pick when you create the code, you can always add it later).</li> </ul> <p>Now use github to make a new repository, make sure to add a README file, .gitignore (specific for the programming language you use) and License (don't worry about which one you pick).</p> <p>Once made, it should look like something like this: </p> <p>Note that we can upload files and edit files directly with GitHub.</p>"},{"location":"day2/git_and_github/#part-23-make-a-commit-on-github","title":"Part 2.3, Make a commit on GitHub","text":"<p>It's quite rare to do this (perhaps except for updating README files), but lets use GitHub to make a commit.</p> <p>We'll update the README with some more text. Click on the README file and then click on the pencil in the top left corner of the document to enter edit mode.</p> <p>The README file is a markdown file, with extension \".md\". This allows you to easily format the document, see this GitHub guide on markdown. Fun fact, The document you're reading right now was written in markdown.</p> <p>Task: Update the README on GitHub with some markdown formatted content, include things like some bullet points, an extra title and some text in bold. Use this markdown guide from GitHub to help you if you don't know the syntax.</p> <p>Tip: Regularly swap between the edit and preview modes to check you're formatting correctly.</p>"},{"location":"day2/git_and_github/#part-24-make-a-local-copy-of-the-github-repo","title":"Part 2.4, Make a local copy of the GitHub Repo","text":"<p>As we covered in the powerpoint, the GitHub repository is a \"remote\" version of the project.</p> <p>To make a local copy we'll need to clone it. Use the SSH option that we setup in Part 2.1</p> <p></p> <p>Then in a terminal do:</p> <pre><code>git clone [repository to clone, copied from the picture above]\ncd test-repo\nls -alh\n</code></pre> <p>If you get a error about SSH keys not being setup, go back to the tutorial on Step 2.1 and make sure it is setup correctly (ask for help if unsure). By running the <code>ls -alh</code> command we can see the files in this newly created folder include a <code>.git</code> folder. We can also run a <code>git status</code> command to see the current state of the repository.</p> <p>Finally if we run the command:</p> <pre><code>git remote -v\n</code></pre> <p>You should see something like:</p> <pre><code>origin  git@github.com:RMCrean/test-repo.git (fetch)\norigin  git@github.com:RMCrean/test-repo.git (push)\n</code></pre> <p>This essentially means we have the ability to push and pull (for now think of \"pull\" and \"fetch\" as the same) commits from our local repo to our remote repo on GitHub. Let's do that.</p>"},{"location":"day2/git_and_github/#part-25-push-a-local-change-to-the-remote-repository","title":"Part 2.5, Push a Local Change to the Remote Repository","text":"<p>Now we'll make a local commit and push this change to the remote repository on GitHub. Follow the same steps as you did for Part 1 (create/update file, add files to staging area, commit files). Once you're done run <code>git status</code>, you'll see something along these lines:</p> <pre><code>On branch main\nYour branch is ahead of 'origin/main' by 1 commit.\n</code></pre> <p>Here origin/main refers to the remote (GitHub). As the message implies, we have changes (commits) we can \"push\" to GitHub. To do that run:</p> <pre><code>git push\n</code></pre> <p>Go take a look at the repository on GitHub, you should see the new changes now added.</p>"},{"location":"day2/git_and_github/#part-26-make-a-remote-commit-and-pull-to-update-the-local-repository","title":"Part 2.6, Make a Remote Commit and \"Pull\" to Update the Local Repository","text":"<p>Now lets do the reverse. Go to main page of your new GitHub repo and click on add file and either upload or add a new file directly.</p> <p>Now if we run <code>git status</code> in our local repository it should say we are 1 commit behind, but instead what do we see?</p> Spoiler We see we're up to date. So the changes on the remote aren't yet known about on our local repository.  <p>To check for changes on the remote repository we need to first run:</p> <pre><code>git remote update\n</code></pre> <p>After this <code>git status</code> will correctly tell us we are 1 commit behind and we can pull the change using:</p> <pre><code>git pull\n</code></pre> <p>Now our local and remote versions are up to date again.</p>"},{"location":"day2/git_and_github/#part-2-summary","title":"Part 2 - Summary:","text":"<p>You saw after setting up the remote and local repositories we used the same 2 commands on top of the ones we already learned:</p> <pre><code>git status # old\ngit add [files_to_add] # old\ngit commit # old\ngit push # new\ngit pull # new\n</code></pre> <p>For projects that you work on alone, that's not too far from the truth once you're setup.</p> <p>Back to the powerpoint...</p>"},{"location":"day2/git_branch_merge/","title":"Branches and Merging","text":""},{"location":"day2/git_branch_merge/#hands-on-session-part-3-branches-and-merging","title":"Hands on Session - Part 3, Branches and Merging","text":"<ul> <li> <p>Branch Branching lets you have different versions of a repository at one time. By default, your repository has one branch named <code>main</code> (sometimes called <code>master</code> instead) that is considered to be the definitive/central branch. Typically a new branch is used to work on new features or bug fixes without affecting the main codebase until you are ready to merge the changes.</p> </li> <li> <p>Merge Merging combines changes from different branches into a single branch, typically changes are merged into the <code>main</code> branch.</p> </li> </ul> <p> <sub><sup>Image taken from coderefinery: https://coderefinery.github.io/git-intro/branches/ </sup></sub></p>"},{"location":"day2/git_branch_merge/#part-31-create-a-new-branch","title":"Part 3.1, Create a New Branch:","text":"<p>Now we'll create a new branch inside our repository. </p> <pre><code>git branch new-feature main\n</code></pre> <p>This means we'll create a new branch called <code>new-feature</code> using a copy of the current state of the <code>main</code> branch. </p> <p>Now if we run: <pre><code>git branch \n</code></pre></p> <p>We'll see two branches, and the branch we are working on (main) indicated by an asterisk.</p> <p>To swap to the other branch we can do: </p> <pre><code>git checkout new-feature\n</code></pre> <p>If you now run <code>git branch</code> again, you'll now see we're working in the <code>new-feature</code> branch. </p> <p>Tip: you can combine the creation of a new branch and swapping to the branch is a single step:</p> <pre><code>git checkout -b new-feature main\n</code></pre>"},{"location":"day2/git_branch_merge/#part-32-make-a-commit-in-the-new-branch-and-merge-them","title":"Part 3.2, Make a Commit in the New Branch and Merge them.","text":"<p>Add a new file and commit this file to the new branch. </p> <p>Tip: Make sure you're working in the <code>new-feature</code> branch, you can check by typing: <code>git branch</code>.</p> <p>Once you've made the commit, we first swap back to the <code>main</code> branch:</p> <pre><code>git checkout main\n</code></pre> <p>Then we merge the <code>new-feature</code> branch into the <code>main</code> branch: </p> <pre><code>git merge new-feature\n</code></pre> <p>At this point you should see the new file you created inside the main branch. You can also safely delete the <code>new-feature</code> branch (recommended, otherwise you'll end up with a large number of branches after a while which can be confusing).</p> <pre><code>git branch -d new-feature\n</code></pre> <p>If you run <code>git branch</code> now you should see the <code>new-feature</code> branch no longer exists. </p>"},{"location":"day2/git_branch_merge/#part-33-merge-two-branches-using-a-github-pull-request","title":"Part 3.3, Merge Two Branches Using a GitHub Pull Request","text":"<p>Now we'll repeat essentially the same process but this time instead of using the merge command in Git, we'll use GitHub's pull request feature instead.</p> <ol> <li>Create the new branch and switch to it: </li> </ol> <pre><code>git checkout -b new-feature-pull main\n</code></pre> <ol> <li> <p>Add a new file, commit the file, making sure you're in the <code>new-feature-pull</code> repository. </p> </li> <li> <p>Push the new file to the remote repository. </p> </li> </ol> <p>Note that if we try to use just <code>git push</code> it wont work, instead we'll need to do:</p> <pre><code>git push -u origin new-feature-pull\n</code></pre> <p>It's not important right now to understand but the <code>-u</code> is short for <code>--set-upstream</code> option, which essentially sets up our <code>git pull</code> or <code>git push</code> commands for this new branch.</p> <p>Now head over to GitHub and go to the main page of your repository, where you should see a message like this: </p> <p>If we click to \"compare and pull\" we can start the pull request process. </p> <p>This is best shown on the board, so I'll show this at the time and we can follow along. To revise the topic later on you can click here for a nice guide/tutorial</p> <p>Once the pull request is successful we can go ahead and delete the old branch, you could do this on Git (as we saw in Part 3.2) or on GitHub. </p> <p>This is typically how you merge branches when working with others. You can also use this method when working alone. </p>"},{"location":"day2/git_end/","title":"End of Git and GitHub Session","text":"<p>We've now gone through the basics of Git and GitHub. Several topics weren't covered in this session. Including dealing with merge conflicts and how to undo things. That said, you should have enough to get started. </p> <p>Please see the section \"End of Day Overview\" for more resources. </p>"},{"location":"day2/git_intro/","title":"Getting Started With Git","text":"<p>As we have now seen in the powerpoint, Git is a version control system used to track changes in source code (or other files). It enables multiple people to work on the same project simultaneously and (somewhat) independently.</p>"},{"location":"day2/git_intro/#part-11-install-git-and-create-a-github-account","title":"Part 1.1 - Install Git and Create a GitHub Account","text":"<p>useful links:</p> <ul> <li>Download git - select the right option for your OS.</li> <li>Sign up to GitHub</li> </ul>"},{"location":"day2/git_intro/#part-12-set-up-git","title":"Part 1.2 - Set up Git","text":"<p>Now we'll set some default settings for git, open up git in the command line and add these code blocks.</p> <p>Recommendation: Set your user.name to your github user name, and do not use spaces. <pre><code>git config --global user.name \"Your_User_Name\"\n</code></pre></p> <p>Recommendation: Set your user.email to: \"[your git hub user name]@users.noreply.github.com\". <pre><code>git config --global user.email yourname@example.com\n</code></pre></p> <pre><code>git config --global init.defaultBranch main\n</code></pre> <p>Optional extra setting:</p> <p>Set the default text editor to use with git. You'll make use of this text editor when you for example write commit messages. I like to use vscode (you'll need to have it installed), you can choose something else or skip this step if you like. Take a look here for some example editors you could use. <pre><code>git config --global core.editor \"[your text editor here] -w\"\n</code></pre></p> <p>By adding the <code>-w</code> flag we tell Git to wait for you to write your commit message in your code editor.</p> <p>You can confirm these commands worked by doing:</p> <p><code>git config --list --show-origin</code></p> <p>You should need see your settings added.</p>"},{"location":"day2/git_intro/#part-13-create-a-new-git-repository","title":"Part 1.3 - Create a New Git Repository","text":"<p>Now we'll create a local Git repository to get a feel for how things work:</p> <p>First, we'll make a folder for our recipe and then initiate the repository:</p> <pre><code>mkdir recipe\ncd recipe\ngit init -b main\n</code></pre> <p>Note: The \"-b\" flag in the git init command is short for: \"--initial-branch\". We set this to main. This is a standard (you may also see \"master\") sometimes. You don't have to set your initial branch to either of these names, but you should.</p> <p>Now run:</p> <pre><code>git status\n</code></pre> <p>This command gives a report on the current status of our repository. Think back to the picture we saw in the presentation:</p> <p> <sub><sup>Image from the Pro Git Book: https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F</sup></sub></p> <p>The git status command will tell us where our different files are at in these steps. Of course, right now we have no files.</p>"},{"location":"day2/git_intro/#part-14-make-our-first-commit","title":"Part 1.4 - Make our First Commit","text":"<p>Lets make a file inside our folder called \"the_best_programming_language.txt\" and add your favorite programming language inside the file.</p> <p>Run the <code>git status</code> command again, what's changed?</p> <p>Go one step further and stage the change using \"git add\":</p> <pre><code>git add the_best_programming_language.txt\n</code></pre> <p>Now run the <code>git status</code> command again, what stage is the file at now?</p> <p>Finally, lets commit the file using:</p> <pre><code>git commit\n</code></pre> <p>Or</p> <pre><code>git commit -m \"Added a file on the best programming language in the world\"\n</code></pre> <p>The -m stands for message, and is the message you write to explain your commit, (i.e., what files have you added and what have you done with them).</p> <ul> <li>What do you see now if you run git status one more time?</li> </ul> <p>Recap: the commands we've seen so far are:</p> <ul> <li><code>git status</code> : report</li> <li><code>git add [files to add]</code> add file(s) to the staging area</li> <li><code>git commit</code> commit the files from staging area.</li> </ul>"},{"location":"day2/git_intro/#part-15-make-our-2nd-and-3rd-commits","title":"Part 1.5 - Make our 2nd and 3rd Commits","text":"<p>Now, lets make two new commits, use git status as often as you need to check your on the right track.</p> <ol> <li> <p>For the first new commit, lets create a file called \"top_3_animals.txt\" and add only your favorite animal to the file. Add this file, commit it and make sure your commit message includes an explanation for what you've done.</p> </li> <li> <p>For the second commit, update the file called \"top_3_animals.txt\" to add the remaining two animals to the file.</p> </li> </ol>"},{"location":"day2/git_intro/#part-16-looking-at-the-commit-history","title":"Part 1.6 - Looking at the Commit History","text":"<p>We can use the <code>git log</code> command to see the commits made to the repository (in reverse order). Each commit has a hash which provides a unique label for the commit.</p> <p>Test out the following versions of <code>git log</code>:</p> <pre><code>git log # standard\ngit log --oneline # summary version\ngit log --stat # more detailed\n</code></pre> <p>Note: Git has a lot of functionality to compare commits (see how the files have changed between commits) or files waiting to be committed (see command: <code>git diff</code>). That said, it's normally easier to do this in your code editor, so we'll skip it for now, click here for a tutorial on it.</p>"},{"location":"day2/git_intro/#part-17-good-commit-messages","title":"Part 1.7 - Good Commit Messages","text":"<p>An example good commit message:</p> <pre><code>Change plot line colours for all graphs\n\nChange performed because prior color palette was bad for color blind people.\nSome other useful thing to know for someone else/future you.\n</code></pre> <p>The top line is the title of the commit and should provide a quick summary. Then there is a blank line before the message body which provides more details if useful (some commits don't need a body). You don't need to include things like the names of the files you've changed as it's already stored in the commit, see for example: <code>git log --stat</code>.</p> <p>You can read more about good commit messages here.</p>"},{"location":"day2/git_intro/#part-18-summary-so-far","title":"Part 1.8 - Summary so far:","text":"<p>You saw after setup we used the same set of commands repeatedly to make commits:</p> <pre><code>git status\ngit add [files to add]\ngit commit\n</code></pre> <p>When working on just a local repository by yourself this is pretty much all you need.</p> <p>The next powerpoint will focus on how to incorporate GitHub (a remote repository) into our workflow.</p> <p>Back to the powerpoint...</p>"},{"location":"day2/independent_work/","title":"Independent work","text":""},{"location":"day2/independent_work/#topic-1-markdown","title":"Topic 1: Markdown","text":"<p>Markdown is simple language to make formatted text documents. It's useful way to keep notes and is the language of choice when making documentation for projects linked to GitHub. </p> <p>Assignment: Make some documentation for a pre-existing project in Markdown. Tip: You can use VSCode to edit and preview markdown text. </p>"},{"location":"day2/independent_work/#topic-2-the-pep8-style-guide","title":"Topic 2: The Pep8 Style Guide","text":"<p>The Pep8 style guide provides a set of coding conventions for Python code. </p> <p>Assignment: Read/learn about the style guide and see if you can identify things you could do better when you code. You can use the pep8 style guide itself or the numerous resources surrounding it. You can also find organization like Google and NumPy have style guides that are largely based on Pep8 but with their own personal modifications.  </p> <p>Bonus Question: What tools can be used to enforce coding conventions a style guide? </p> Tip for bonus question- click on me for a hint Have a read of this: https://code.visualstudio.com/docs/python/formatting"},{"location":"day2/independent_work/#topic-3-code-documentation","title":"Topic 3: Code Documentation","text":"<p>We have discussed several aspects of writing good code. One area we have partially touched on is code documentation (for example with type hints and variable names). S</p> <p>Assignment: Search for good practices surrounding code documentation. The links below are a good place to start. </p> <ul> <li>Documenting Python Code: A Complete Guide</li> <li>Video: How to Document Your Code Like a Pro</li> </ul>"},{"location":"day2/type_hints/","title":"Type Hinting","text":""},{"location":"day2/type_hints/#type-hints","title":"Type Hints:","text":"<p>Type hints allow you to annotate functions and classes you create to indicate the datatype the argument accepts.</p> <p>Here are some basic types that you are probably familiar with: <pre><code>int, float, str, bool\n</code></pre></p> <p>Tip: we can obtain the type of any python object using the type() command: <pre><code>x = 5\nprint(type(x))\n&lt;class 'int'&gt;\n</code></pre> The object <code>x</code> therefore has a type int.</p>"},{"location":"day2/type_hints/#type-hints-for-containers","title":"Type hints for containers","text":"<p>Containers include types like: <code>list, tuple, set, dict:</code>.</p> <p>Depending on how specific we want to be we can specify the types of the data inside the container:</p> <p>For example the object <code>x = [5, 10, 13, 14]</code> is of type: <code>list[int]</code>. Meaning it is a list of integers. We could have also simply defined it is as a <code>list</code>.</p>"},{"location":"day2/type_hints/#how-to-add-type-hints-to-functions","title":"How to add type hints to functions","text":"<p>Functions and classes are often defined with type hints.</p> <p>Here is an example of a simple function with type hints added:</p> <pre><code>def degrees_to_kelvin(temp_degrees: float) -&gt; float:\n    \"\"\"Convert a temperature from units degrees to kelvin\"\"\"\n    return temp_degrees + 273.15\n\n# example usage:\ndegrees_to_kelvin(temp_degrees=27)\n# output: 300.15\n</code></pre> <ul> <li>The input parameter <code>temp_degrees</code> is assigned a type float.</li> <li>The output of the function is shown by what comes after the <code>-&gt;</code>. This is also a float.</li> </ul>"},{"location":"day2/type_hints/#special-type-hints","title":"Special type hints","text":"<p>Included in the Python typing package are special type hints that represent</p> <ul> <li><code>Any</code>: Represents a variable of any type.</li> <li><code>Union</code>: Indicates that a variable can have one of several types.</li> </ul> <p>To use these type hints you'll need to import them, for example:</p> <pre><code>from typing import Any, Union\n</code></pre> <p>Here is an example usage of <code>Any</code>. We can use the type hint <code>Any</code> here as we do not modify the keys of the dictionary so our code is not dependant on its type. </p> <pre><code>from typing import Any\n\ndef normalise_dict_values(original_dict: dict[Any, float]) -&gt; dict[Any, float]:\n    \"\"\"\n    Normalise a set of dictionary values to have max value of 1.\n    Returns the dictionary without modifying the keys.\n\n    Parameters\n    ----------\n    original_dict: dict[Any, float]\n        dictionary to normalise\n\n    Returns\n    ----------\n    dict[Any, float]\n        normalised dictionary\n    \"\"\"\n    max_score = max((original_dict.values()))\n\n    updated_dict = {}\n    for key, value in original_dict.items():\n        new_score = value / max_score\n        updated_dict[key] = new_score\n\n    return updated_dict\n\n# Example usage: \ninput_dict = {'Value1': 10, 'Value2': 20, 'Value3': 5}\nnormalized_dict = normalise_dict_values(input_dict)\nprint(normalized_dict)\n\n# output: {'Value1': 0.5, 'Value2': 1.0, 'Value3': 0.25}\n</code></pre>"},{"location":"day2/type_hints/#type-hints-when-returning-multiple-objects","title":"Type hints when returning multiple objects","text":"<p>If you have a function that returns multiple objects, these will be returned as a tuple, you can also add type hints to reflect the 2 or more objects you return. </p> <pre><code>def add_and_multiply(x: float, y: float) -&gt; tuple[float, float]:\n    \"\"\"\n    Adds and multiplies two numbers.\n\n    Parameters\n    ----------\n    x: float \n      The first number.\n    y: float\n      The second number.\n\n    Returns\n    -------\n    result_sum: float\n      The sum of the inputs x and y. \n\n    result_product: float\n      The products of the inputs x and y. \n    \"\"\"\n    result_sum = x + y\n    result_product = x * y\n    return result_sum, result_product\n\n# Example usage:\nthe_sum, the_product = add_and_multiply(3.0, 4.0)\nprint(f\"Sum: {the_sum}, Product: {the_product}\")\n</code></pre> <p>Here we specify that two floats will be returned as a tuple: <code>tuple[float, float]</code>. </p> <p>Note that we can't use type hints alone to specify which object comes out first, but we can do that by documenting the function. </p>"},{"location":"day2/type_hints/#type-hints-for-3rd-party-library-objects","title":"Type hints for 3rd party library objects","text":"<p>We can also use type hints on 3rd party library objects like a Pandas DataFrame or NumPy arrays. </p> <p>Here is an example function that does exactly that: </p> <pre><code>import pandas as pd\nimport numpy as np \nfrom typing import  Union\n\ndef array_to_dataframe(data: Union[list, np.ndarray], columns: list[str]) -&gt; pd.DataFrame:\n    \"\"\"\n    Convert some data and a corresponding list of column names to a Pandas DataFrame.\n\n    Parameters\n    ----------\n    data : Union[list, np.ndarray]\n        The input array or list.\n    columns : List[str]\n        The list of column names.\n\n    Returns\n    -------\n    pd.DataFrame\n        The Pandas DataFrame created from the input array and column names.\n    \"\"\"\n    if isinstance(data, np.ndarray):\n        df = pd.DataFrame(data, columns=columns)\n    elif isinstance(data, list):\n        df = pd.DataFrame([data], columns=columns)\n    else:\n        raise ValueError(\"Unsupported data type. Use either a list or np.ndarray.\")\n\n    return df\n\n# Example usage:\ndata = np.array([[1, 2], [3, 4], [5, 6]])\ncolumn_names = ['Column1', 'Column2']\ndf = array_to_dataframe(data, column_names)\n</code></pre>"},{"location":"day2/type_hints/#question-what-should-the-type-hints-be-for-the-function-below","title":"Question: What should the type hints be for the function below?","text":"<pre><code>def multiply_two_numbers(number_1, number_2):\n    return number_1 * number_2\n</code></pre> Click to reveal answer <pre><code>def multiply_two_numbers(number_1: float, number_2: float) -&gt; float:\n    return number_1 * number_2\n</code></pre>    You may have been tempted to write `int` or `Union[float, int]`. But in this case, by saying we can take a float, we imply we can take an int."},{"location":"day2/type_hints/#exercise-add-type-hints","title":"Exercise: Add Type Hints","text":"<p>Download this python script and add type hints to the functions inside. </p> <p>The answers will be added at the end of the day. </p>"},{"location":"day2/type_hints/#summary","title":"Summary:","text":"<p>Type hints are a way to provide hints to developers and users about the expected types of different objects in your code. They are not enforced by the Python interpreter at runtime. If you want to enforce type checking you can look into tools like mypy. </p>"},{"location":"day2/type_hints/#further-reading","title":"Further Reading:","text":"<ul> <li>A type hints introduction/tutorial</li> <li>Video: 5 Reasons Why You Should Use Type Hints In Python</li> </ul>"},{"location":"day2/variable_naming/","title":"Variable Naming","text":"<p>Variable names should be clear and descriptive. With rare exceptions you should avoid using one or a few letters to name a variable. Both other people and future you will be grateful if you name your variables clearly.</p> <p>Different objects in Python have different naming conventions. These naming conventions help us directly understand what the object is when we look at it, making the code more readable.</p> <p>Note: You don't have to follow naming conventions, it's just strongly recommended.</p>"},{"location":"day2/variable_naming/#naming-variables","title":"Naming Variables:","text":"<p>Variables are named in all lower case format, with an underscore between each word.</p> <p>1 letter variable names are generally ill-advised except for certain exceptions. Exceptions include for example \"i and j\" (math notation), x, y, z (coordinates) and i (when used for keeping track of the index).</p>"},{"location":"day2/variable_naming/#group-exercise-rank-the-variable-name-quality","title":"Group exercise, rank the variable name quality","text":"<p>Take a few minutes to rank each of the variable names below into on the following categories: \"good\", \"okay\" and \"bad\". Justify your classifications. </p> <p>Variable names to rank:</p> <pre><code>var = True\nmy_dict = {\"registration plate\": \"KA50 LAQ\", \"car insurance number\": 82192323, \"model\": \"ford_escort\"}\na = 2\nfruit_list = [\"apple\", \"banana\", \"cherry\"]\nmy_list = [\"apple\", \"banana\", \"cherry\"]\nis_active = False\ntemperature_celsius = 25.5\n</code></pre>"},{"location":"day2/variable_naming/#naming-functions","title":"Naming Functions:","text":"<p>Like variables, functions are named in all lower case format, with an underscore between each word.</p> <p>Some example function names <pre><code>def bake_bread(ingredients):\n    ...\ndef print_hello_world():\n    ...\ndef combine_2_dfs(df1, df2, combine_approach):\n    ...\n</code></pre> Note that in the third example, df (short for DataFrame) was used, its okay to use things like this as long as you and others who'll need to use the code understand these acronyms. Another examples would be <code>number</code> being replaced by <code>numb</code> or <code>num</code>.</p>"},{"location":"day2/variable_naming/#naming-classes","title":"Naming Classes:","text":"<p>Classes in python are typically named in CamelCase format. If you see an object in CamelCase format, chances are that it is a class.</p> <p>Some example class <pre><code>class FileReader:\n    ...\nclass Person:\n    ...\nclass WeatherReport:\n    ...\n</code></pre></p>"},{"location":"day2/variable_naming/#naming-constants","title":"Naming Constants:","text":"<p>Constants are things that don't change from start to finish in your code. When you or someone else uses your code it can be useful to explicitly label that these things are constant. In Python we do this by naming the object in ALL_CAPITALS.</p> <p>In a script, constants should be provided at the top of the file after the imports and before any code:</p> <p>Some example constants <pre><code>PI_2_DECIMAL_PLACES = 3.14\nINPUT_FILE_PATH = r\"folder1/folder2/file_name.txt\"\nSCREEN_RESOLUTION = (1280, 720)\n</code></pre></p>"},{"location":"day2/variable_naming/#question","title":"Question","text":"<p>In the above example <code>SCREEN_RESOLUTION</code> was defined as a tuple and not a list. Have a think about why that might be the right choice in this case?</p> Click to reveal answer    Tuples are immutable, meaning their elements cannot be changed or modified after creation. List are mutable on the other hand.   Once you define a tuple, its elements remain constant. This immutability helps ensure they wont accidentally be altered."},{"location":"day2/clean_code_exercise/improve_code_exercise/","title":"Exercise, Clean Code","text":"<p>All of the below code works, but there is a more \"pythonic\" way to do it. Can you find it?</p> In\u00a0[1]: Copied! <pre># original code - don't edit this cell\ndef manual_str_formatting(name, thesis_title, num_pages):\n        print(\"My name is \" + name + \".\\n\" + \n              \"I'm a writting a book called: \" + thesis_title + \".\\n\" + \n              \"It will be about \" + str(num_pages) + \" pages long.\")\n\nmanual_str_formatting(name=\"Tim\", thesis_title=\"Tim's Troubles\", num_pages=300)\n</pre> # original code - don't edit this cell def manual_str_formatting(name, thesis_title, num_pages):         print(\"My name is \" + name + \".\\n\" +                \"I'm a writting a book called: \" + thesis_title + \".\\n\" +                \"It will be about \" + str(num_pages) + \" pages long.\")  manual_str_formatting(name=\"Tim\", thesis_title=\"Tim's Troubles\", num_pages=300) <pre>My name is Tim.\nI'm a writting a book called: Tim's Troubles.\nIt will be about 300 pages long.\n</pre> In\u00a0[2]: Copied! <pre># your improved version\n</pre> # your improved version  In\u00a0[3]: Copied! <pre># code to setup question, no editing needed \njam_scores = {\n    \"strawberry\" : 5,\n    \"raspberry\": 10,\n    \"blueberry\": 6,\n    \"cherry\": 4\n}\n</pre> # code to setup question, no editing needed  jam_scores = {     \"strawberry\" : 5,     \"raspberry\": 10,     \"blueberry\": 6,     \"cherry\": 4 } In\u00a0[4]: Copied! <pre># original code - don't edit this cell\nfor jam in jam_scores:\n    score = jam_scores[jam]\n    print(f\"{jam} jam has a rating of {score}/10 \")\n</pre> # original code - don't edit this cell for jam in jam_scores:     score = jam_scores[jam]     print(f\"{jam} jam has a rating of {score}/10 \") <pre>strawberry jam has a rating of 5/10 \nraspberry jam has a rating of 10/10 \nblueberry jam has a rating of 6/10 \ncherry jam has a rating of 4/10 \n</pre> In\u00a0[5]: Copied! <pre># your improved version\n</pre> # your improved version  In\u00a0[6]: Copied! <pre># code to setup question, no editing needed \ndogs = ['Labrador Retriever', 'German Shepherd', 'Golden Retriever', 'Bulldog', 'Poodle']\n</pre> # code to setup question, no editing needed  dogs = ['Labrador Retriever', 'German Shepherd', 'Golden Retriever', 'Bulldog', 'Poodle'] In\u00a0[7]: Copied! <pre># original code - don't edit this cell\nfor i in range(len(dogs)):\n    dog = dogs[i]\n    print(dog)\n</pre> # original code - don't edit this cell for i in range(len(dogs)):     dog = dogs[i]     print(dog) <pre>Labrador Retriever\nGerman Shepherd\nGolden Retriever\nBulldog\nPoodle\n</pre> In\u00a0[8]: Copied! <pre># your improved version\n</pre> # your improved version In\u00a0[9]: Copied! <pre># code to setup question, no editing needed \ndogs_show_rankings = ['Labrador Retriever', 'German Shepherd', 'Golden Retriever']\n</pre> # code to setup question, no editing needed  dogs_show_rankings = ['Labrador Retriever', 'German Shepherd', 'Golden Retriever'] In\u00a0[10]: Copied! <pre># original code - don't edit this cell\nranking = 1\nfor dog in dogs_show_rankings:\n    print(f\"The {dog} had ranking {ranking} in the dog show\")\n    ranking += 1\n</pre> # original code - don't edit this cell ranking = 1 for dog in dogs_show_rankings:     print(f\"The {dog} had ranking {ranking} in the dog show\")     ranking += 1 <pre>The Labrador Retriever had ranking 1 in the dog show\nThe German Shepherd had ranking 2 in the dog show\nThe Golden Retriever had ranking 3 in the dog show\n</pre> <p>Explanation: Enumerate will return the index along side the item inside the list. You can also change the starting value of the index to be something other than 0. Sometimes I have found it useful to start from 1 for example.</p> In\u00a0[11]: Copied! <pre># code to setup question, no editing needed \ndogs = ['Labrador Retriever', 'German Shepherd', 'Golden Retriever', 'Bulldog', 'Poodle']\nfavourite_toys = dog_toys = ['Chew Bone', 'Squeaky Toy', 'Tug Rope', 'Fetch Ball', 'Plush Toy']\n</pre> # code to setup question, no editing needed  dogs = ['Labrador Retriever', 'German Shepherd', 'Golden Retriever', 'Bulldog', 'Poodle'] favourite_toys = dog_toys = ['Chew Bone', 'Squeaky Toy', 'Tug Rope', 'Fetch Ball', 'Plush Toy'] In\u00a0[12]: Copied! <pre># original code - don't edit this cell\nfor shared_index in range(len(dogs)):\n    dog = dogs[shared_index]\n    fav_toy = favourite_toys[shared_index]\n    print(f\"{fav_toy}s are a {dog}'s favourite toy\")\n</pre> # original code - don't edit this cell for shared_index in range(len(dogs)):     dog = dogs[shared_index]     fav_toy = favourite_toys[shared_index]     print(f\"{fav_toy}s are a {dog}'s favourite toy\") <pre>Chew Bones are a Labrador Retriever's favourite toy\nSqueaky Toys are a German Shepherd's favourite toy\nTug Ropes are a Golden Retriever's favourite toy\nFetch Balls are a Bulldog's favourite toy\nPlush Toys are a Poodle's favourite toy\n</pre> In\u00a0[13]: Copied! <pre># your improved version\n</pre> # your improved version In\u00a0[14]: Copied! <pre># original code - don't edit this cell\ndef write_hello_in_empty_file(file_name):\n    f = open(file_name, \"w\")\n    f.write(\"hello!\\n\")\n    f.close()\nwrite_hello_in_empty_file(file_name=\"hello_world.txt\")\n</pre> # original code - don't edit this cell def write_hello_in_empty_file(file_name):     f = open(file_name, \"w\")     f.write(\"hello!\\n\")     f.close() write_hello_in_empty_file(file_name=\"hello_world.txt\") In\u00a0[15]: Copied! <pre># your improved version\n</pre> # your improved version In\u00a0[16]: Copied! <pre># original code - don't edit this cell\ncoordinates = [13.01021212, 14.201, -12.30422121]\nx = coordinates[0]\ny = coordinates[1]\nz = coordinates[2]\nprint(f\"The coordinates are: {x:.2f}, {y:.2f}, {z:.2f}\")\n</pre> # original code - don't edit this cell coordinates = [13.01021212, 14.201, -12.30422121] x = coordinates[0] y = coordinates[1] z = coordinates[2] print(f\"The coordinates are: {x:.2f}, {y:.2f}, {z:.2f}\") <pre>The coordinates are: 13.01, 14.20, -12.30\n</pre> In\u00a0[17]: Copied! <pre># your improved version\n</pre> # your improved version  In\u00a0[18]: Copied! <pre># code to setup question, no editing needed \nnumb = 2.675\n</pre> # code to setup question, no editing needed  numb = 2.675 In\u00a0[19]: Copied! <pre># original code - don't edit this cell\nprint(f\"the number: {numb} to 2 decimal places is {round(numb, 2)}\")\nprint(\"Was the above statement right?\")\n\nfrom numpy import * # numpy has a function called \"round\", so we'll import that. \nprint(\"importing numpy to fix the problem\")\nprint(f\"the number: {numb} to 2 decimal places is {round(numb, 2)}\")\nprint(\"Was the above statement right now that we imported numpy?\")\n</pre> # original code - don't edit this cell print(f\"the number: {numb} to 2 decimal places is {round(numb, 2)}\") print(\"Was the above statement right?\")  from numpy import * # numpy has a function called \"round\", so we'll import that.  print(\"importing numpy to fix the problem\") print(f\"the number: {numb} to 2 decimal places is {round(numb, 2)}\") print(\"Was the above statement right now that we imported numpy?\") <pre>the number: 2.675 to 2 decimal places is 2.67\nWas the above statement right?\nimporting numpy to fix the problem\nthe number: 2.675 to 2 decimal places is 2.67\nWas the above statement right now that we imported numpy?\n</pre> In\u00a0[20]: Copied! <pre># your improved version\n</pre> # your improved version In\u00a0[21]: Copied! <pre># original code - don't edit this cell\ndef update_basket(new_item, shopping_basket=[]):\n    shopping_basket.append(new_item)\n    return shopping_basket\n\ncustomer_1_basket = update_basket(new_item=\"milk\", shopping_basket=[\"bread\", \"cheese\"])\ncustomer_2_basket = update_basket(new_item=\"bananas\")\ncustomer_3_basket = update_basket(new_item=\"eggs\")\n\nprint(f\"Customer 1's basket contains: {customer_1_basket}\")\nprint(f\"Customer 2's basket contains: {customer_2_basket}\")\nprint(f\"Customer 3's basket contains: {customer_3_basket}\")\n</pre> # original code - don't edit this cell def update_basket(new_item, shopping_basket=[]):     shopping_basket.append(new_item)     return shopping_basket  customer_1_basket = update_basket(new_item=\"milk\", shopping_basket=[\"bread\", \"cheese\"]) customer_2_basket = update_basket(new_item=\"bananas\") customer_3_basket = update_basket(new_item=\"eggs\")  print(f\"Customer 1's basket contains: {customer_1_basket}\") print(f\"Customer 2's basket contains: {customer_2_basket}\") print(f\"Customer 3's basket contains: {customer_3_basket}\") <pre>Customer 1's basket contains: ['bread', 'cheese', 'milk']\nCustomer 2's basket contains: ['bananas', 'eggs']\nCustomer 3's basket contains: ['bananas', 'eggs']\n</pre> In\u00a0[22]: Copied! <pre># your improved version\n</pre> # your improved version"},{"location":"day2/clean_code_exercise/improve_code_exercise/#instructions","title":"Instructions\u00b6","text":"<ul> <li>Edit each cell block labelled \"your improved version\" with your suggested improvements.</li> <li>Make sure your alternate version gives the same output as the original code block.</li> </ul>"},{"location":"day2/clean_code_exercise/improve_code_exercise/#tips","title":"Tips:\u00b6","text":"<ul> <li>Ask what each code block is doing (e.g. printing something out) and ask how you could do this differently - perhaps in a more readable way or more efficently).</li> <li>If you can't solve the problem that's okay, move onto the next one. We'll go through them all afterwards and the awnsers will be made available to you.</li> </ul>"},{"location":"day2/clean_code_exercise/improve_code_exercise/#question-1","title":"Question 1\u00b6","text":""},{"location":"day2/clean_code_exercise/improve_code_exercise/#question-2","title":"Question 2\u00b6","text":""},{"location":"day2/clean_code_exercise/improve_code_exercise/#question-3","title":"Question 3\u00b6","text":""},{"location":"day2/clean_code_exercise/improve_code_exercise/#question-4","title":"Question 4\u00b6","text":""},{"location":"day2/clean_code_exercise/improve_code_exercise/#question-5","title":"Question 5\u00b6","text":""},{"location":"day2/clean_code_exercise/improve_code_exercise/#question-6","title":"Question 6\u00b6","text":""},{"location":"day2/clean_code_exercise/improve_code_exercise/#question-7","title":"Question 7\u00b6","text":""},{"location":"day2/clean_code_exercise/improve_code_exercise/#question-8","title":"Question 8\u00b6","text":"<p>Hint: This one has 2 things to think about...</p>"},{"location":"day2/clean_code_exercise/improve_code_exercise/#question-9","title":"Question 9\u00b6","text":"<p>Hint: In this question, the code is not working as intended...</p>"},{"location":"day2/clean_code_exercise/improve_code_exercise/#bonus-question-10","title":"Bonus Question 10\u00b6","text":"<p>Inside the GitHub repository there is a file called: \"improve_code_extra_exercise.py\".</p> <p>Look at the code and predict what will happen when you run the code. Then run it and see if you prediction was correct. Then fix it.</p> <p>Hint: For this one you may have to restart your terminal after running the program.</p>"},{"location":"day2/clean_code_exercise/improve_code_extra_exercise/","title":"Improve code extra exercise","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nThis is a bonus exercise.  \n\"\"\"\n</pre> \"\"\" This is a bonus exercise.   \"\"\" In\u00a0[\u00a0]: Copied! <pre># original code\ndef number_game():\n    while True:\n        try:\n            s = input(\"Try input something that's not a number: \")\n            x = int(s)\n            break\n        except: \n            print(\"Try use CTRL-C to exit now\")\n</pre> # original code def number_game():     while True:         try:             s = input(\"Try input something that's not a number: \")             x = int(s)             break         except:              print(\"Try use CTRL-C to exit now\") In\u00a0[\u00a0]: Copied! <pre>if __name__ == \"__main__\":\n    number_game() # also fine to write here: \"number_game()\".\n</pre> if __name__ == \"__main__\":     number_game() # also fine to write here: \"number_game()\"."},{"location":"day2/type_hints_exercise/add_type_hints/","title":"Add type hints","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nAdd type hints to the functions below. \n\"\"\"\n</pre> \"\"\" Add type hints to the functions below.  \"\"\" In\u00a0[\u00a0]: Copied! <pre>def filter_odd_numbers(numbers):\n    \"\"\"Filters odd numbers from a sequence of numbers.\"\"\"\n    result = []\n    for num in numbers:\n        if num % 2 == 0:\n            result.append(num)\n    return result\n</pre> def filter_odd_numbers(numbers):     \"\"\"Filters odd numbers from a sequence of numbers.\"\"\"     result = []     for num in numbers:         if num % 2 == 0:             result.append(num)     return result In\u00a0[\u00a0]: Copied! <pre>def square_numbers(numbers):\n    \"\"\"Square numbers in a sequence.\"\"\"\n    result = []\n    for num in numbers:\n        result.append(num**2)\n    return result\n</pre> def square_numbers(numbers):     \"\"\"Square numbers in a sequence.\"\"\"     result = []     for num in numbers:         result.append(num**2)     return result In\u00a0[\u00a0]: Copied! <pre>def count_chars(words):\n    \"\"\"Counts the number of characters in a sequence of words.\"\"\"\n    result = []\n    for word in words:\n        result.append(len(word))\n    return result\n</pre> def count_chars(words):     \"\"\"Counts the number of characters in a sequence of words.\"\"\"     result = []     for word in words:         result.append(len(word))     return result In\u00a0[\u00a0]: Copied! <pre>def main():\n    \"\"\"Show some example uses of the above function\"\"\"\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    even_numbers = filter_odd_numbers(numbers=numbers)\n    squared_even_numbers = square_numbers(even_numbers)\n    print(f\"{squared_even_numbers=}\")\n\n    words = [\"apple\", \"banana\", \"cherry\"]\n    numb_chars = count_chars(words=words)\n    print(f\"{numb_chars=}\")\n</pre> def main():     \"\"\"Show some example uses of the above function\"\"\"     numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]      even_numbers = filter_odd_numbers(numbers=numbers)     squared_even_numbers = square_numbers(even_numbers)     print(f\"{squared_even_numbers=}\")      words = [\"apple\", \"banana\", \"cherry\"]     numb_chars = count_chars(words=words)     print(f\"{numb_chars=}\") In\u00a0[\u00a0]: Copied! <pre>if __name__ == \"__main__\":\n    main()\n</pre> if __name__ == \"__main__\":     main()"},{"location":"day3/arg_passer/","title":"Command Line Options with argparser","text":"<p>Perhaps you need to regularly process some data obtained from an instrument. The data file output from the instrument is always the same except for the file name and few parameters. You have written a python script to process the data, but with every new experiment you have to go inside the script and update the adjustable parameters. There is another option which is the argparse module.</p>"},{"location":"day3/arg_passer/#what-is-the-argparse-module","title":"What is the argparse module:","text":"<p>The argparse module in Python is a standard library module that provides a convenient way to parse command-line arguments. It's particularly useful for creating command-line interfaces (CLIs) for your Python scripts or programs. </p> <p>Here are some reasons why someone might want to use the argparse module:</p> <ol> <li> <p>User-Friendly Command-Line Interface. It automatically generates help messages. This can be accessed by users typing: <code>python [script_name.py] --help</code>. </p> </li> <li> <p>Argument Parsing: You can specify the arguments (parameters), their types, and whether they are optional or required. argparse handles the conversion of these command-line arguments into Python objects.</p> </li> <li> <p>Default Values: You can set default values for your command-line arguments.</p> </li> <li> <p>Error Handling: argparse provides built-in error handling and will print helpful error messages if users provide incorrect or incomplete command-line input.</p> </li> </ol>"},{"location":"day3/arg_passer/#basic-example-of-python-script-using-argparse","title":"Basic example of python script using argparse","text":"<pre><code>import argparse\n\ndef main():\n    parser = argparse.ArgumentParser(description='A simple script with command-line arguments.')\n\n    parser.add_argument('--input', type=str, help='Input file path', required=True)\n    parser.add_argument('--output', type=str, help='Output file path', default='output.txt')\n\n    args = parser.parse_args()\n\n    print(f'Input file: {args.input}')\n    print(f'Output file: {args.output}')\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>This script can then be run with: <code>python [script_name.py] --input input_file.txt --output output_file.txt</code></p> <p>In this example, the script takes two command-line arguments (--input, and --output). The argparse module is used to define these arguments, set their types and default values, and then parse the command-line input.</p> <p>As shown in the script, we can access the value of each argument using <code>args.input</code> or <code>args.output</code> within our script.</p>"},{"location":"day3/arg_passer/#exercise-practice-using-argparser","title":"Exercise: Practice using argparser","text":"<p>Build some simple python scripts that make use of Argparser. </p> <p>1. Calculator:</p> <ul> <li>Create a simple calculator script that takes two numbers and can perform the 4 basic arithmetic operations: (addition, subtraction, multiplication, and division). </li> <li>The script should accept command-line arguments for the operation and the two numbers.</li> </ul> <p>2. Word Counter:</p> <ul> <li>Build a script that counts the number of words in a given text file. </li> <li>Allow the user to specify the file path as a command-line argument.</li> </ul> <p>3. Temperature Converter:</p> <ul> <li>Create a script that converts temperatures between Celsius and Fahrenheit. </li> <li>Let the user specify the temperature value and the unit (Celsius or Fahrenheit) as command-line arguments.</li> </ul>"},{"location":"day3/arg_passer/#extra-reading","title":"Extra Reading:","text":"<ul> <li>Detailed Tutorial on Argparser. </li> </ul>"},{"location":"day3/day3_end/","title":"End of Day Overview","text":"<p>TODO </p>"},{"location":"day3/day3_intro/","title":"Introduction","text":"<p>Today will first focus on 3 practical skills:</p> <ol> <li>Installing your own code</li> <li>Making your scripts take command line arguments. </li> <li>Using regular expressions. </li> </ol> <p>For the rest of the day your are encouraged to perform some self study on the libraries Pandas and NumPy.</p>"},{"location":"day3/installing_own_code/","title":"Installing your own code","text":"<p>Lets say you have a function that you need to use several times throughout your project. This includes in different python files and notebooks. </p> <pre><code>def my_own_special_function() -&gt; None:\n    \"\"\"Print hello world \"\"\"\n    print(\"hello world\")\n</code></pre> <p>We could just copy-paste the function into all the different files we need to use, but this probably wont end well, because we will end up with duplicate code and what happens if we need to change it. </p> <p>Instead, we can write the function down in one place and install it. </p> <p>Then to use it anywhere in our project we can do something like:</p> <pre><code>from my_package.special_functions import my_own_special_function\n\nmy_own_special_function()\n</code></pre> <p>As you can see, now it becomes just like using a function from NumPy or Pandas, and we only have one place where we need to edit the code if we need to (if for example there is a bug or we want to change it's functionality). </p>"},{"location":"day3/installing_own_code/#setting-this-up","title":"Setting This Up","text":"<p>The first time setting this up can be awkward, but after that it becomes quite straight forward. </p> <p>To set this up, we'll need to:</p> <ul> <li>A folder to store our installable code inside of.  </li> <li>An <code>__init__.py</code> file. - This makes the directory the file is in be recognized as a module by Python. </li> <li>A <code>setup.py</code> file that effectively works as a configuration file. </li> </ul> <p>Teacher note: Show an example of installable code on the internet</p>"},{"location":"day3/installing_own_code/#folder-structure","title":"Folder Structure","text":"<p>The folder structure we will use is as follows: </p> <pre><code>\u251c\u2500 src   \n\u2502  \u2514\u2500 my_package \n\u2502     \u251c\u2500 __init__.py\n\u2502     \u2514\u2500 ...\n\u251c\u2500 tests\n\u2502  \u2514\u2500 ...\n\u251c\u2500 data\n\u2502  \u2514\u2500 ...\n\u251c\u2500 modelling \n\u2502  \u2514\u2500 ...\n\u2514\u2500 setup.py\n</code></pre> <p>The file <code>__init__.py</code> inside the directory <code>my_package</code> makes the .py files inside the directory be recognized as modules by Python. </p> <p>The <code>__init__.py</code> needs to be there but can be empty.  </p> <p>Note, there is technically another way to setup your folder structure, but it goes a bit beyond the scope of the session to talk about here. The long story short is that either works for what we are doing here, so I'm only going to show one. You can read more about it here.</p>"},{"location":"day3/installing_own_code/#the-setuppy-file","title":"The setup.py file","text":"<p>Here is a basic setup.py that we can talk through: </p> <pre><code>from setuptools import setup, find_packages\n\nVERSION = \"0.1.0\"\nDESCRIPTION = \"A python package to do something\"\nLONG_DESCRIPTION = \"\"\"\nA more detailed description of what this package does. \nCan be multiple lines if you like. \n\"\"\"\n\nsetup(\n    name=\"package_name\",\n    version=VERSION,\n    description=DESCRIPTION,\n    long_description=LONG_DESCRIPTION,\n    author=\"your name here\",\n    author_email=\"your email here if you want\",  \n    url=\"\",\n    packages=find_packages(where=\"src\"),\n    package_dir={\"\": \"src\"},\n    install_requires=[\n        \"notebook\",\n        \"scikit-learn\",\n        \"numpy\",\n        \"pandas\",\n        \"plotly\",\n        \"kaleido\",\n    ],\n    extras_require={\n        \"dev\": [\"pytest\", \"black\", \"setuptools\", \"twine\"],\n    },\n    python_requires=\"&gt;=3.10\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: OS Independent\",\n    ],\n)\n</code></pre> <p>Note that the setup.py file is stored in the outermost folder of your project directory. This is the standard. </p> <p>You can read more about the setup.py file here.</p>"},{"location":"day3/installing_own_code/#installing-your-code","title":"Installing your code:","text":"<p>Now with the files and folders needed we can run the following command after activating our virtual environment. </p> <pre><code># make sure you virtual environment is active\npip install --editable . \n</code></pre> <ul> <li>The <code>.</code> means in this folder (it will find the <code>setup.py</code> file thanks to this). </li> <li>The <code>--editable</code> part of the command means if we make changes to our source code (inside the <code>src</code> folder)</li> </ul> <p>In some cases, different users of a project might have different dependencies. A common occurrence can be that someone who develops the code will need to install extra programs to help with things like testing or developing the code. This can be specified in the <code>setup.py</code> as we saw above:</p> <pre><code>extras_require={\n    \"dev\": [\"pytest\", \"black\", \"setuptools\", \"twine\"],\n</code></pre> <p>Here, we are effectively saying someone who develops (dev) this code needs these packages, but someone who just uses this code does not. By default using: </p> <pre><code>pip install . \nor \npip install --editable . \n</code></pre> <p>will not install these packages. To do this we can run:</p> <pre><code>pip install \".[dev]\"\n# or \npip install --editable \".[dev]\" \n</code></pre> <p>This will install BOTH the dev specific packages and the original set of packages. </p>"},{"location":"day3/installing_own_code/#exercise","title":"Exercise:","text":"<p>Create a new project folder and add your own module (a python file) with installable code. Validate that you can import and use your code, and that any edits you make are automatically updated in your installation of the code (i.e., you installed the code using the <code>--editable</code> flag). </p>"},{"location":"day3/installing_own_code/#further-reading","title":"Further Reading:","text":"<ul> <li>A complete guide on making code that is available for install by others using pip. </li> <li>https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/</li> </ul>"},{"location":"day3/numpy_pandas/","title":"NumPy and Pandas Self Study","text":"<p>This afternoon session is a self-paced session where you can focus on improving your Pandas and NumPy skills using pre-existing tutorials. </p> <p>If you work with data in Python you will likely end up working with both Pandas and NumPy if you haven't already. Below I have provided a list of some suggestions for what you can work on. </p> <p>Note: If you have specific questions or things you want to do then please let me know and we can work on them together. </p>"},{"location":"day3/numpy_pandas/#pandas-beginner","title":"Pandas Beginner:","text":"<ul> <li>Introduction to Exploratory Data Analysis, Jupyter Notebook There is also a youtube video to go along with the notebook.</li> <li>Pandas tutorials as notebooks</li> </ul>"},{"location":"day3/numpy_pandas/#numpy-beginner","title":"NumPy Beginner:","text":"<ul> <li>NumPy tutorials as notebooks</li> <li>Numpy video tutorial</li> </ul>"},{"location":"day3/numpy_pandas/#other-pandas-and-numpy","title":"Other Pandas and Numpy","text":"<ul> <li>Best practices with Pandas, video tutorial series</li> <li>Speed up Pandas, video with several tips</li> </ul>"},{"location":"day3/numpy_pandas/#miscellaneous-resources","title":"Miscellaneous resources:","text":"<ul> <li>Pandas Cheat sheet</li> <li> <p>NumPy Cheat sheet</p> </li> <li> <p>Pandas Cookbook</p> </li> </ul>"},{"location":"day3/regex/","title":"Regular Expressions","text":"<p>Regular expressions are a powerful tool for matching patterns in text. To use regular expressions in Python, you can use the re module. The syntax for using regular expressions is:</p> <pre><code>import re\n\n# Match the pattern \"foo\"\nmatch = re.match(\"foo\", \"foobar\")\n\nif match:\n  print(\"The string contains the pattern 'foo'\")\nelse:\n  print(\"The string does not contain the pattern 'foo'\")\n</code></pre> <p>re is the module that contains the regular expression functions match() is the function that matches a regular expression against a string r\"foo\" is the regular expression pattern to match match is the object that contains the results of the match if match: is the conditional statement that is executed if the match is successful print(\"The string contains the pattern 'foo'\") is the code that is executed if the match is successful else: is the else clause that is executed if the match is not successful print(\"The string does not contain the pattern 'foo'\") is the code that is executed if the match is not successful</p>"},{"location":"day3/regex/#formatting-regular-expressions","title":"Formatting Regular Expressions","text":""},{"location":"day3/regex/#handling-edge-cases","title":"Handling edge cases","text":"<p>example edge cases and how to write expression for them. </p>"},{"location":"day3/regex/#tips-applying-regular-expressions","title":"Tips applying regular expressions","text":"<ul> <li>using raw strings where needed. </li> <li>providing several examples where it works and where it doesn't work. </li> </ul>"},{"location":"day3/regex/#additional-resources","title":"Additional Resources:","text":"<ul> <li>regex tutorial</li> </ul>"},{"location":"day3/testing/","title":"Testing","text":"<p>Testing explanation here... </p>"},{"location":"day3/testing/#integration-vs-unit-testing","title":"Integration vs unit testing","text":""},{"location":"day3/testing/#libraries-to-run-testing","title":"Libraries to run testing","text":"<p>dssds</p>"},{"location":"day3/testing/#pytest","title":"PyTest","text":""},{"location":"day3/testing/#pytest-tips-and-tricks","title":"PyTest tips and tricks.","text":""},{"location":"day3/testing/#writing-tests","title":"Writing tests","text":"<p>can use hypothesis, chatgpt, can add test data etc.. </p>"},{"location":"day3/testing/#further-readingwatching","title":"Further reading/watching","text":"<ul> <li>(pytest documentation)[https://docs.pytest.org/en/stable/getting-started.html]</li> <li>(Video on pytest)[https://www.youtube.com/watch?v=mzlH8lp4ISA]</li> <li>(Python library that enables property based testing)[https://hypothesis.readthedocs.io/en/latest/]</li> <li>(Video on \"test driven development\", writes tests before writing the code)[https://www.youtube.com/watch?v=B1j6k2j2eJg] </li> </ul>"},{"location":"day4/day4_end/","title":"End of Day Overview","text":"<p>Today focussed on making figures and testing code. Please refer to the original sections for external resources on these sections.  </p>"},{"location":"day4/day4_intro/","title":"Introduction","text":"<p>Today will focus on making figures and testing code. </p>"},{"location":"day4/figure_making_challenges/","title":"Exercise on Figure Making","text":"<p>In this exercise you'll be challenged to remake some figures. You're provided with data you need to make these figures but how you do it and what graphing library you use is up to you. </p> <p>In cases where you deem appropriate try also to improve the quality of the figure. </p> <p>You can write your solutions in a jupyter notebook or as a regular .py file. </p> <p>Tip: Don't worry about things like matching the font exactly. Try to use a nice consistent style and use the features from the graph </p>"},{"location":"day4/figure_making_challenges/#figure-1","title":"Figure 1:","text":"Tip - click on me for a hint TODO   Solution - click on me for an example solution TODO"},{"location":"day4/figure_making_challenges/#figure-2","title":"Figure 2:","text":"<p>To download the data needed:</p> <pre><code>import plotly.express as px\ndf = px.data.tips()\n</code></pre> Tip - click on me for a hint This is a box plot. To show the scatter points alongside the box plot you can use the points `argument` in Plotly.  Solution - click on me for an example solution <pre><code>import plotly.express as px\nimport plotly.io as pio # used to save the image \n\ndf = px.data.tips()\n\nfig = px.box(df, x=\"time\", y=\"total_bill\", points=\"all\")\nfig.update_layout(\n    template=\"plotly_white\",\n    xaxis=dict(title=\"\", titlefont=dict(size=32)),\n    yaxis=dict(title=\"Total Bill ($)\", titlefont=dict(size=32)),\n    margin=dict(l=20, r=20, t=20, b=20),\n    font_family=\"Arial\",\n    width=800,\n    height=600,\n)\n\nfig.update_xaxes(showgrid=False, showline=True, linewidth=2, linecolor='black', mirror=True,\n                 ticks=\"outside\", tickwidth=2, tickcolor='black', ticklen=10,\n                 tickfont=dict(color='black', size=22))\nfig.update_yaxes(showgrid=False, showline=True, linewidth=2, linecolor='black', mirror=True,\n                 ticks=\"outside\", tickwidth=2, tickcolor='black', ticklen=10,\n                 tickfont=dict(color='black', size=22))\n\nfig.show()\npio.write_image(fig, r\"../docs/assets/day4/replicate_fig_2.png\", scale=6)\n</code></pre>"},{"location":"day4/figure_making_challenges/#figure-3","title":"Figure 3:","text":"<p>To download the data needed:</p> <pre><code>import pandas as pd\n\ndf_url = r\"https://raw.githubusercontent.com/RMCrean/practical-python-for-scientists/master/docs/assets/day4/county_bar_chart.csv\"\ndf = pd.read_csv(df_url)\n</code></pre> Tip - click on me for a hint This is a horizontal bar chart with a \"ylgnbu\" yellow, green blue continuous colour scale.   Solution - click on me for an example solution <pre><code>import plotly.express as px\nimport plotly.io as pio  # used to save the image \n\nfig = px.bar(df, x=\"Median Rent (SEK)\", y=\"county\", orientation=\"h\",\n             color=\"Median Rent (SEK)\", color_continuous_scale=\"ylgnbu\")\nfig.show()\npio.write_image(fig, r\"../docs/assets/day4/replicate_fig_3.png\", scale=6)\n</code></pre> <p>Bonus:  - Improve the fonts sizes used.  - Use a white background,  - Add a line to show the median value.  - Does the y-axis need to start from 0 SEK?</p>"},{"location":"day4/figure_making_challenges/#figure-4","title":"Figure 4:","text":"<p>To download the data needed:</p> <pre><code>from sklearn.datasets import load_diabetes\ndiabetes_data = load_diabetes(as_frame=True)\ndf = diabetes_data[\"data\"]\n</code></pre> Tip - click on me for a hint The plot type is a violin plot. To link the column names to the names we use on the x-axis we could use a dictionary:  <pre><code>columns_to_use = {\"Age\": \"age\", \"BMI\": \"bmi\", \"Blood Pressure\": \"bp\"}\n</code></pre> Solution - click on me for an example solution <pre><code>import plotly.graph_objects as go\nimport plotly.io as pio  # used to save the image \n\ncolumns_to_use = {\"Age\": \"age\", \"BMI\": \"bmi\", \"Blood Pressure\": \"bp\"}\n\n\n# create the figure object and add each column to it. \nfig = go.Figure()\n\nfor y_name, y_index in columns_to_use.items():\n    fig.add_trace(\n        go.Violin(\n            y=df[y_index],\n            line_color=\"mediumpurple\",\n            legendgroup=y_name, name=y_name,\n            ),\n    )\n\n# update characteristics shared by all traces\nfig.update_traces(meanline_visible=True,\n                  points=\"all\", # show all points\n                  jitter=0.40,  # add some jitter on points for better visibility\n)\n\nfig.update_layout(\n    template=\"plotly_white\",\n    yaxis= dict(title=\"Value\", titlefont=dict(size=32)),\n    margin=dict(l=20, r=20, t=20, b=20),\n    showlegend=False,\n    font_family=\"Arial\",\n    width=900,\n    height=600,\n)\n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True,\n                 ticks=\"outside\", tickwidth=2, tickcolor='black', ticklen=10,\n                 tickfont=dict(color='black', size=16))\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True,\n                 ticks=\"outside\", tickwidth=2, tickcolor='black', ticklen=10,\n                 tickfont=dict(color='black', size=22))\nfig.show()\npio.write_image(fig, r\"../docs/assets/day4/replicate_fig_4.png\", scale=6)\n</code></pre> <p>Bonus: Assign a unique colour to each graph.  </p>"},{"location":"day4/figure_making_challenges/#figure-5-confusion-matrix","title":"Figure 5: Confusion Matrix","text":"<p>To download the data needed:</p> <pre><code>actual_values = [1, 0, 1, 1, 0, 1, 0, 0, 1, 0]\npredicted_values = [1, 0, 1, 0, 0, 1, 1, 0, 1, 1]\n</code></pre> Tip - click on me for a hint Convert the above predictions and actual values in to a confusion matrix of shape 2 x 2.  Solution - click on me for an example solution <pre><code>import plotly.figure_factory as ff\nimport plotly.io as pio  # used to save the image\n\n# Create a confusion matrix\nconf_matrix = [[0, 0], [0, 0]]  \nfor actual, predicted in zip(actual_values, predicted_values):\n    conf_matrix[actual][predicted] += 1\n\nfig = ff.create_annotated_heatmap(\n    z=conf_matrix,\n    x=['Predicted 0', 'Predicted 1'],\n    y=['Actual 0', 'Actual 1'],\n    colorscale=\"darkmint\",\n    showscale=True\n)\n\nfig.update_layout(\n    xaxis=dict(title='Predicted', tickfont=dict(size=20)),\n    yaxis=dict(title='Actual', tickfont=dict(size=20)),\n    coloraxis=dict(colorbar=dict(title='Count', tickfont=dict(size=20))),\n    font=dict(family='Arial', size=24),\n    height=800, width=800,\n)\n\nfig.show()\npio.write_image(fig, r\"../docs/assets/day4/replicate_fig_5.png\", scale=6)\n</code></pre>"},{"location":"day4/independent_work/","title":"Independent work","text":""},{"location":"day4/independent_work/#topic-1-design-principles","title":"Topic 1: Design Principles","text":"<p>Using Design principles help you write more maintainable, flexible, easy-to-read code. </p> <p>Assignment: Learn about some of the most common design principles present in Python, and how and why you can apply them to your code. </p> <p>If you're unsure about where to start, this article provides a nice overview.</p>"},{"location":"day4/independent_work/#topic-2-bad-coding-habits","title":"Topic 2: Bad Coding Habits","text":"<p>Assignment: Review this video on bad coding practices and take the time to understand </p>"},{"location":"day4/independent_work/#topic-3-testing-code","title":"Topic 3: Testing code","text":"<p>Testing code is important to ensure your code behaves as you expect and ensures any future changes to your code don't break it. </p> <p>Whilst Python has a built in library for testing Python code named unittest, a very popular alternative that I would recommend learning is Pytest. </p> <p>Assignment: Learn about how to write basics tests for your code using Pytest. Understand the various types of tests (e.g. unit, integration, end to end) and what edge cases are. Practice implementing some basics tests with pytest on your own code. </p> <p>Useful links:</p> <ul> <li>Video tutorial on Pytest</li> <li>Article on Pytest</li> </ul>"},{"location":"day4/plotly_into/","title":"Plotly","text":"<p>Plotly is one of many popular graphing libraries in Python. </p> <p>The most popular is perhaps Matplotlib and seaborn (which is built on top of Matplotlib). Whilst </p> <p>The graphing library I will show is Plotly which I like mainly for its interactivity, whereby everything is interactive by default. A solid understanding of one graphing library is enough to get by if you need to use another. </p> <p>https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/ipython-notebook-tutorial.ipynb </p>"},{"location":"day4/plotly_into/#making-publication-quality-figures","title":"Making \"Publication Quality\" Figures","text":"<p>Some tips:</p> <p>Multi-panel figures.  - Okay to use external tool to put the images together, add some labelling etc...  - Perhaps hardest part of making graphs. </p>"},{"location":"day5/project_planning/","title":"Project Planning","text":"<p>Today, we can begin preparing for the final project but first we'll start with a Q and A session. </p>"},{"location":"day5/project_planning/#q-and-a-session","title":"Q and A Session","text":"<p>First, we can start with a Q and A session. This is a chance to discuss or go over any of the material so far that you may be unsure about or want to know more about. Questions can be about anything really. </p>"},{"location":"day5/project_planning/#final-project-assignment","title":"Final Project Assignment","text":"<p>The final project can either be to complete a project in which you apply Python to your own research (encouraged) or in cases where this is not possible, an alternative project will be provided that suits you and your field. If you choose to apply Python to your own research, you can select something that suits you. This could for example be analyzing some newly generated data or automating some data analysis that you previously used excel to do. </p> <p>The final project results will be presented as part of a short seminar in 5 weeks time. I want the final projects to be beneficial to you and your research goals so please consider that priority number one when designing the projects. </p>"},{"location":"day5/project_planning/#make-a-brief-presentation-to-describe-your-project","title":"Make a Brief Presentation to Describe your Project","text":"<p>Now we can begin with some project planning for your project. </p> <p>It's important to remember this is science and things/ideas/plans change as we go along. It's okay to adapt as you go but an initial plan with some key goals and a general outline of how you will get things done is really valuable in my experience. </p> <p>Consider the following points:</p> <ul> <li>Define your project and its goals.  </li> <li>What do you need to do achieve those goals.</li> <li>Think about your raw data. How will you store it stored? How will you represent the main bits of data in Python (e.g. as DataFrames, dictionaries etc..).  </li> <li>How will you present your results, specific figure types you might use. For example, a histogram to show this distribution.  </li> <li>Will there be any new techniques that you'll need to learn to analyze it.</li> <li>How will your setup your project directory. Folders and layout. </li> </ul>"},{"location":"day5/project_planning/#exercise-make-a-short-presentation-describing-your-project","title":"Exercise: Make a short presentation describing your project","text":"<p>Things to Include:</p> <ul> <li>A basic description of the project and its goals. </li> <li>Define an outline of the steps you'll need to take. </li> <li>One or more parts of the project you are unsure about, or will need to learn more about. </li> </ul> <p>Try to keep the presentation less than 5 minutes long and focus </p> <p>Things your unsure about or help you might need. </p>"},{"location":"day5/project_planning/#bonusoptional-requirements","title":"Bonus/Optional Requirements:","text":"<ul> <li>Use git to track your progress and publish your work on GitHub (you can of course keep the repository private if it should not be shared yet - e.g. work towards a publication)</li> <li>Write tests as you go to validate your work.  </li> </ul>"}]}